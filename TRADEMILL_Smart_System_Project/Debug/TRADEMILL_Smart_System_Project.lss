
TRADEMILL_Smart_System_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002a4e  00002ae2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800070  00800070  00002af2  2**0
                  ALLOC
  3 .stab         00002afc  00000000  00000000  00002af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000117b  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000676b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008664  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000954f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a2fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aeb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_1>
       8:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__vector_2>
       c:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_6>
      1c:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__vector_9>
      28:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__vector_10>
      2c:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 21 10 	call	0x2042	; 0x2042 <main>
      8a:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DC_Motor_Init>:
#include"DCMOTOR_config.h"
#include"DCMOTOR_private.h"


u8 DC_Motor_Init(const Motor_t *Motor)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DC_Motor_Init+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
u8 Return_Status = OK;
     b56:	19 82       	std	Y+1, r1	; 0x01
   if(Motor == NULL)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	19 f4       	brne	.+6      	; 0xb66 <DC_Motor_Init+0x20>
   {
	   Return_Status = NOK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	14 c0       	rjmp	.+40     	; 0xb8e <DC_Motor_Init+0x48>
   }
   else
   {
	   DIO_u8SetPinDirection(Motor->motor_Pin[0].Port , Motor->motor_Pin[0].Pin,DIO_u8PIN_Output);
     b66:	ea 81       	ldd	r30, Y+2	; 0x02
     b68:	fb 81       	ldd	r31, Y+3	; 0x03
     b6a:	81 81       	ldd	r24, Z+1	; 0x01
     b6c:	ea 81       	ldd	r30, Y+2	; 0x02
     b6e:	fb 81       	ldd	r31, Y+3	; 0x03
     b70:	90 81       	ld	r25, Z
     b72:	69 2f       	mov	r22, r25
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	   DIO_u8SetPinDirection(Motor->motor_Pin[1].Port , Motor->motor_Pin[1].Pin,DIO_u8PIN_Output);
     b7a:	ea 81       	ldd	r30, Y+2	; 0x02
     b7c:	fb 81       	ldd	r31, Y+3	; 0x03
     b7e:	84 81       	ldd	r24, Z+4	; 0x04
     b80:	ea 81       	ldd	r30, Y+2	; 0x02
     b82:	fb 81       	ldd	r31, Y+3	; 0x03
     b84:	93 81       	ldd	r25, Z+3	; 0x03
     b86:	69 2f       	mov	r22, r25
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
   }
   return Return_Status;
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <DC_Motor_Move_Right>:
u8 DC_Motor_Move_Right(const Motor_t *Motor)
{
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <DC_Motor_Move_Right+0x6>
     ba2:	0f 92       	push	r0
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	9b 83       	std	Y+3, r25	; 0x03
     baa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Return_Status = OK;
     bac:	19 82       	std	Y+1, r1	; 0x01
	   if(Motor == NULL)
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	9b 81       	ldd	r25, Y+3	; 0x03
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	19 f4       	brne	.+6      	; 0xbbc <DC_Motor_Move_Right+0x20>
	   {
		   Return_Status = NOK;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	89 83       	std	Y+1, r24	; 0x01
     bba:	14 c0       	rjmp	.+40     	; 0xbe4 <DC_Motor_Move_Right+0x48>
	   }
	   else
	   {
		DIO_u8SetPinValue(Motor->motor_Pin[0].Port , Motor->motor_Pin[0].Pin,DIO_u8PIN_HIGH);
     bbc:	ea 81       	ldd	r30, Y+2	; 0x02
     bbe:	fb 81       	ldd	r31, Y+3	; 0x03
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	ea 81       	ldd	r30, Y+2	; 0x02
     bc4:	fb 81       	ldd	r31, Y+3	; 0x03
     bc6:	90 81       	ld	r25, Z
     bc8:	69 2f       	mov	r22, r25
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor->motor_Pin[1].Port , Motor->motor_Pin[1].Pin,DIO_u8PIN_LOW);
     bd0:	ea 81       	ldd	r30, Y+2	; 0x02
     bd2:	fb 81       	ldd	r31, Y+3	; 0x03
     bd4:	84 81       	ldd	r24, Z+4	; 0x04
     bd6:	ea 81       	ldd	r30, Y+2	; 0x02
     bd8:	fb 81       	ldd	r31, Y+3	; 0x03
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	69 2f       	mov	r22, r25
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_u8SetPinValue>
	   }
	   return Return_Status;
     be4:	89 81       	ldd	r24, Y+1	; 0x01
}
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <DC_Motor_Move_Left>:
u8 DC_Motor_Move_Left(const Motor_t *Motor)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <DC_Motor_Move_Left+0x6>
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	9b 83       	std	Y+3, r25	; 0x03
     c00:	8a 83       	std	Y+2, r24	; 0x02
	u8 Return_Status = OK;
     c02:	19 82       	std	Y+1, r1	; 0x01
	   if(Motor == NULL)
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	19 f4       	brne	.+6      	; 0xc12 <DC_Motor_Move_Left+0x20>
	   {
		   Return_Status = NOK;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	14 c0       	rjmp	.+40     	; 0xc3a <DC_Motor_Move_Left+0x48>
	   }
	   else
	   {
		DIO_u8SetPinValue(Motor->motor_Pin[0].Port , Motor->motor_Pin[0].Pin,DIO_u8PIN_LOW);
     c12:	ea 81       	ldd	r30, Y+2	; 0x02
     c14:	fb 81       	ldd	r31, Y+3	; 0x03
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	ea 81       	ldd	r30, Y+2	; 0x02
     c1a:	fb 81       	ldd	r31, Y+3	; 0x03
     c1c:	90 81       	ld	r25, Z
     c1e:	69 2f       	mov	r22, r25
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor->motor_Pin[1].Port , Motor->motor_Pin[1].Pin,DIO_u8PIN_HIGH);
     c26:	ea 81       	ldd	r30, Y+2	; 0x02
     c28:	fb 81       	ldd	r31, Y+3	; 0x03
     c2a:	84 81       	ldd	r24, Z+4	; 0x04
     c2c:	ea 81       	ldd	r30, Y+2	; 0x02
     c2e:	fb 81       	ldd	r31, Y+3	; 0x03
     c30:	93 81       	ldd	r25, Z+3	; 0x03
     c32:	69 2f       	mov	r22, r25
     c34:	41 e0       	ldi	r20, 0x01	; 1
     c36:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_u8SetPinValue>
	   }
	   return Return_Status;
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <DC_Motor_Stop>:
u8 DC_Motor_Stop(const Motor_t *Motor)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <DC_Motor_Stop+0x6>
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	9b 83       	std	Y+3, r25	; 0x03
     c56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Return_Status = OK;
     c58:	19 82       	std	Y+1, r1	; 0x01
	   if(Motor == NULL)
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	9b 81       	ldd	r25, Y+3	; 0x03
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	19 f4       	brne	.+6      	; 0xc68 <DC_Motor_Stop+0x20>
	   {
		   Return_Status = NOK;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	14 c0       	rjmp	.+40     	; 0xc90 <DC_Motor_Stop+0x48>
	   }
	   else
	   {
		DIO_u8SetPinValue(Motor->motor_Pin[0].Port , Motor->motor_Pin[0].Pin,DIO_u8PIN_LOW);
     c68:	ea 81       	ldd	r30, Y+2	; 0x02
     c6a:	fb 81       	ldd	r31, Y+3	; 0x03
     c6c:	81 81       	ldd	r24, Z+1	; 0x01
     c6e:	ea 81       	ldd	r30, Y+2	; 0x02
     c70:	fb 81       	ldd	r31, Y+3	; 0x03
     c72:	90 81       	ld	r25, Z
     c74:	69 2f       	mov	r22, r25
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor->motor_Pin[1].Port , Motor->motor_Pin[1].Pin,DIO_u8PIN_LOW);
     c7c:	ea 81       	ldd	r30, Y+2	; 0x02
     c7e:	fb 81       	ldd	r31, Y+3	; 0x03
     c80:	84 81       	ldd	r24, Z+4	; 0x04
     c82:	ea 81       	ldd	r30, Y+2	; 0x02
     c84:	fb 81       	ldd	r31, Y+3	; 0x03
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	69 2f       	mov	r22, r25
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_u8SetPinValue>
	   }
	   return Return_Status;
     c90:	89 81       	ldd	r24, Y+1	; 0x01
}
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <DIO_u8SetPinDirection>:
#include"DIO_private.h"
#include"BIT_MATH.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8PORT ,u8 Copy_u8PIN,u8 Copy_u8Direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	28 97       	sbiw	r28, 0x08	; 8
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0 ;
     cb8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PIN <= DIO_u8PIN7)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <DIO_u8SetPinDirection+0x24>
     cc0:	f1 c0       	rjmp	.+482    	; 0xea4 <DIO_u8SetPinDirection+0x206>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	88 23       	and	r24, r24
     cc6:	09 f0       	breq	.+2      	; 0xcca <DIO_u8SetPinDirection+0x2c>
     cc8:	77 c0       	rjmp	.+238    	; 0xdb8 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8PORT)
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	38 87       	std	Y+8, r19	; 0x08
     cd2:	2f 83       	std	Y+7, r18	; 0x07
     cd4:	8f 81       	ldd	r24, Y+7	; 0x07
     cd6:	98 85       	ldd	r25, Y+8	; 0x08
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	59 f1       	breq	.+86     	; 0xd34 <DIO_u8SetPinDirection+0x96>
     cde:	2f 81       	ldd	r18, Y+7	; 0x07
     ce0:	38 85       	ldd	r19, Y+8	; 0x08
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <DIO_u8SetPinDirection+0x54>
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	69 f0       	breq	.+26     	; 0xd0a <DIO_u8SetPinDirection+0x6c>
     cf0:	60 c0       	rjmp	.+192    	; 0xdb2 <DIO_u8SetPinDirection+0x114>
     cf2:	2f 81       	ldd	r18, Y+7	; 0x07
     cf4:	38 85       	ldd	r19, Y+8	; 0x08
     cf6:	22 30       	cpi	r18, 0x02	; 2
     cf8:	31 05       	cpc	r19, r1
     cfa:	89 f1       	breq	.+98     	; 0xd5e <DIO_u8SetPinDirection+0xc0>
     cfc:	8f 81       	ldd	r24, Y+7	; 0x07
     cfe:	98 85       	ldd	r25, Y+8	; 0x08
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	91 05       	cpc	r25, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <DIO_u8SetPinDirection+0x6a>
     d06:	40 c0       	rjmp	.+128    	; 0xd88 <DIO_u8SetPinDirection+0xea>
     d08:	54 c0       	rjmp	.+168    	; 0xdb2 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8PIN);  break;
     d0a:	aa e3       	ldi	r26, 0x3A	; 58
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ea e3       	ldi	r30, 0x3A	; 58
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_u8SetPinDirection+0x8a>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_u8SetPinDirection+0x86>
     d2c:	80 95       	com	r24
     d2e:	84 23       	and	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	ba c0       	rjmp	.+372    	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8PIN);  break;
     d34:	a7 e3       	ldi	r26, 0x37	; 55
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e7 e3       	ldi	r30, 0x37	; 55
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_u8SetPinDirection+0xb4>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_u8SetPinDirection+0xb0>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	a5 c0       	rjmp	.+330    	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8PIN);  break;
     d5e:	a4 e3       	ldi	r26, 0x34	; 52
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e4 e3       	ldi	r30, 0x34	; 52
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_u8SetPinDirection+0xde>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_u8SetPinDirection+0xda>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	90 c0       	rjmp	.+288    	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8PIN);  break;
     d88:	a1 e3       	ldi	r26, 0x31	; 49
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e1 e3       	ldi	r30, 0x31	; 49
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_u8SetPinDirection+0x108>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_u8SetPinDirection+0x104>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	7b c0       	rjmp	.+246    	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			default          :    Local_u8ErrorState =1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	78 c0       	rjmp	.+240    	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_Output)
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <DIO_u8SetPinDirection+0x122>
     dbe:	74 c0       	rjmp	.+232    	; 0xea8 <DIO_u8SetPinDirection+0x20a>
		{
			switch(Copy_u8PORT)
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3e 83       	std	Y+6, r19	; 0x06
     dc8:	2d 83       	std	Y+5, r18	; 0x05
     dca:	8d 81       	ldd	r24, Y+5	; 0x05
     dcc:	9e 81       	ldd	r25, Y+6	; 0x06
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	91 05       	cpc	r25, r1
     dd2:	49 f1       	breq	.+82     	; 0xe26 <DIO_u8SetPinDirection+0x188>
     dd4:	2d 81       	ldd	r18, Y+5	; 0x05
     dd6:	3e 81       	ldd	r19, Y+6	; 0x06
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	2c f4       	brge	.+10     	; 0xde8 <DIO_u8SetPinDirection+0x14a>
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	9e 81       	ldd	r25, Y+6	; 0x06
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	61 f0       	breq	.+24     	; 0xdfe <DIO_u8SetPinDirection+0x160>
     de6:	5b c0       	rjmp	.+182    	; 0xe9e <DIO_u8SetPinDirection+0x200>
     de8:	2d 81       	ldd	r18, Y+5	; 0x05
     dea:	3e 81       	ldd	r19, Y+6	; 0x06
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	71 f1       	breq	.+92     	; 0xe4e <DIO_u8SetPinDirection+0x1b0>
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	91 05       	cpc	r25, r1
     dfa:	e9 f1       	breq	.+122    	; 0xe76 <DIO_u8SetPinDirection+0x1d8>
     dfc:	50 c0       	rjmp	.+160    	; 0xe9e <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8PIN);  break;
     dfe:	aa e3       	ldi	r26, 0x3A	; 58
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_u8SetPinDirection+0x17e>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_u8SetPinDirection+0x17a>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	41 c0       	rjmp	.+130    	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8PIN);  break;
     e26:	a7 e3       	ldi	r26, 0x37	; 55
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e7 e3       	ldi	r30, 0x37	; 55
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_u8SetPinDirection+0x1a6>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_u8SetPinDirection+0x1a2>
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	2d c0       	rjmp	.+90     	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8PIN);  break;
     e4e:	a4 e3       	ldi	r26, 0x34	; 52
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e4 e3       	ldi	r30, 0x34	; 52
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_u8SetPinDirection+0x1ce>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_u8SetPinDirection+0x1ca>
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	19 c0       	rjmp	.+50     	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8PIN);  break;
     e76:	a1 e3       	ldi	r26, 0x31	; 49
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e1 e3       	ldi	r30, 0x31	; 49
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_u8SetPinDirection+0x1f6>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_u8SetPinDirection+0x1f2>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			default          :    Local_u8ErrorState =1;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_u8SetPinDirection+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState =1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eaa:	28 96       	adiw	r28, 0x08	; 8
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PORT  , u8 Copy_u8Direction)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <DIO_u8SetPortDirection+0x6>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <DIO_u8SetPortDirection+0x8>
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
     ece:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PORT)
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3d 83       	std	Y+5, r19	; 0x05
     ed8:	2c 83       	std	Y+4, r18	; 0x04
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 05       	cpc	r25, r1
     ee2:	d1 f0       	breq	.+52     	; 0xf18 <DIO_u8SetPortDirection+0x5c>
     ee4:	2c 81       	ldd	r18, Y+4	; 0x04
     ee6:	3d 81       	ldd	r19, Y+5	; 0x05
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	2c f4       	brge	.+10     	; 0xef8 <DIO_u8SetPortDirection+0x3c>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	61 f0       	breq	.+24     	; 0xf0e <DIO_u8SetPortDirection+0x52>
     ef6:	1f c0       	rjmp	.+62     	; 0xf36 <DIO_u8SetPortDirection+0x7a>
     ef8:	2c 81       	ldd	r18, Y+4	; 0x04
     efa:	3d 81       	ldd	r19, Y+5	; 0x05
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	81 f0       	breq	.+32     	; 0xf22 <DIO_u8SetPortDirection+0x66>
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	81 f0       	breq	.+32     	; 0xf2c <DIO_u8SetPortDirection+0x70>
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA:    DDRA = Copy_u8Direction ; break;
     f0e:	ea e3       	ldi	r30, 0x3A	; 58
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	80 83       	st	Z, r24
     f16:	11 c0       	rjmp	.+34     	; 0xf3a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB:    DDRB = Copy_u8Direction ; break;
     f18:	e7 e3       	ldi	r30, 0x37	; 55
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	80 83       	st	Z, r24
     f20:	0c c0       	rjmp	.+24     	; 0xf3a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC:    DDRC = Copy_u8Direction ; break;
     f22:	e4 e3       	ldi	r30, 0x34	; 52
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	80 83       	st	Z, r24
     f2a:	07 c0       	rjmp	.+14     	; 0xf3a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD:    DDRD = Copy_u8Direction ; break;
     f2c:	e1 e3       	ldi	r30, 0x31	; 49
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	80 83       	st	Z, r24
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = 1;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8PORT  ,u8 Copy_u8PIN , u8 Copy_u8Value)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	28 97       	sbiw	r28, 0x08	; 8
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	6b 83       	std	Y+3, r22	; 0x03
     f64:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
     f66:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PIN <= DIO_u8PIN7)
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	88 30       	cpi	r24, 0x08	; 8
     f6c:	08 f0       	brcs	.+2      	; 0xf70 <DIO_u8SetPinValue+0x24>
     f6e:	f1 c0       	rjmp	.+482    	; 0x1152 <DIO_u8SetPinValue+0x206>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	88 23       	and	r24, r24
     f74:	09 f0       	breq	.+2      	; 0xf78 <DIO_u8SetPinValue+0x2c>
     f76:	77 c0       	rjmp	.+238    	; 0x1066 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8PORT)
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	38 87       	std	Y+8, r19	; 0x08
     f80:	2f 83       	std	Y+7, r18	; 0x07
     f82:	8f 81       	ldd	r24, Y+7	; 0x07
     f84:	98 85       	ldd	r25, Y+8	; 0x08
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	59 f1       	breq	.+86     	; 0xfe2 <DIO_u8SetPinValue+0x96>
     f8c:	2f 81       	ldd	r18, Y+7	; 0x07
     f8e:	38 85       	ldd	r19, Y+8	; 0x08
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	2c f4       	brge	.+10     	; 0xfa0 <DIO_u8SetPinValue+0x54>
     f96:	8f 81       	ldd	r24, Y+7	; 0x07
     f98:	98 85       	ldd	r25, Y+8	; 0x08
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f0       	breq	.+26     	; 0xfb8 <DIO_u8SetPinValue+0x6c>
     f9e:	60 c0       	rjmp	.+192    	; 0x1060 <DIO_u8SetPinValue+0x114>
     fa0:	2f 81       	ldd	r18, Y+7	; 0x07
     fa2:	38 85       	ldd	r19, Y+8	; 0x08
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	89 f1       	breq	.+98     	; 0x100c <DIO_u8SetPinValue+0xc0>
     faa:	8f 81       	ldd	r24, Y+7	; 0x07
     fac:	98 85       	ldd	r25, Y+8	; 0x08
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	91 05       	cpc	r25, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <DIO_u8SetPinValue+0x6a>
     fb4:	40 c0       	rjmp	.+128    	; 0x1036 <DIO_u8SetPinValue+0xea>
     fb6:	54 c0       	rjmp	.+168    	; 0x1060 <DIO_u8SetPinValue+0x114>
			{
			           case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8PIN);  break;
     fb8:	ab e3       	ldi	r26, 0x3B	; 59
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	eb e3       	ldi	r30, 0x3B	; 59
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_u8SetPinValue+0x8a>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_u8SetPinValue+0x86>
     fda:	80 95       	com	r24
     fdc:	84 23       	and	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	ba c0       	rjmp	.+372    	; 0x1156 <DIO_u8SetPinValue+0x20a>
			           case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8PIN);  break;
     fe2:	a8 e3       	ldi	r26, 0x38	; 56
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e8 e3       	ldi	r30, 0x38	; 56
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_u8SetPinValue+0xb4>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_u8SetPinValue+0xb0>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	a5 c0       	rjmp	.+330    	; 0x1156 <DIO_u8SetPinValue+0x20a>
			           case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8PIN);  break;
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_u8SetPinValue+0xde>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_u8SetPinValue+0xda>
    102e:	80 95       	com	r24
    1030:	84 23       	and	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	90 c0       	rjmp	.+288    	; 0x1156 <DIO_u8SetPinValue+0x20a>
			           case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8PIN);  break;
    1036:	a2 e3       	ldi	r26, 0x32	; 50
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e2 e3       	ldi	r30, 0x32	; 50
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_u8SetPinValue+0x108>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_u8SetPinValue+0x104>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	7b c0       	rjmp	.+246    	; 0x1156 <DIO_u8SetPinValue+0x20a>
			           default          :    Local_u8ErrorState =1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	78 c0       	rjmp	.+240    	; 0x1156 <DIO_u8SetPinValue+0x20a>
			}

		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	09 f0       	breq	.+2      	; 0x106e <DIO_u8SetPinValue+0x122>
    106c:	74 c0       	rjmp	.+232    	; 0x1156 <DIO_u8SetPinValue+0x20a>
		{
			switch(Copy_u8PORT)
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3e 83       	std	Y+6, r19	; 0x06
    1076:	2d 83       	std	Y+5, r18	; 0x05
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	91 05       	cpc	r25, r1
    1080:	49 f1       	breq	.+82     	; 0x10d4 <DIO_u8SetPinValue+0x188>
    1082:	2d 81       	ldd	r18, Y+5	; 0x05
    1084:	3e 81       	ldd	r19, Y+6	; 0x06
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	2c f4       	brge	.+10     	; 0x1096 <DIO_u8SetPinValue+0x14a>
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	61 f0       	breq	.+24     	; 0x10ac <DIO_u8SetPinValue+0x160>
    1094:	5b c0       	rjmp	.+182    	; 0x114c <DIO_u8SetPinValue+0x200>
    1096:	2d 81       	ldd	r18, Y+5	; 0x05
    1098:	3e 81       	ldd	r19, Y+6	; 0x06
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	71 f1       	breq	.+92     	; 0x10fc <DIO_u8SetPinValue+0x1b0>
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	e9 f1       	breq	.+122    	; 0x1124 <DIO_u8SetPinValue+0x1d8>
    10aa:	50 c0       	rjmp	.+160    	; 0x114c <DIO_u8SetPinValue+0x200>
			{
			           case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8PIN);  break;
    10ac:	ab e3       	ldi	r26, 0x3B	; 59
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	eb e3       	ldi	r30, 0x3B	; 59
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8SetPinValue+0x17e>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_u8SetPinValue+0x17a>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	41 c0       	rjmp	.+130    	; 0x1156 <DIO_u8SetPinValue+0x20a>
			           case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8PIN);  break;
    10d4:	a8 e3       	ldi	r26, 0x38	; 56
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e3       	ldi	r30, 0x38	; 56
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_u8SetPinValue+0x1a6>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_u8SetPinValue+0x1a2>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	2d c0       	rjmp	.+90     	; 0x1156 <DIO_u8SetPinValue+0x20a>
			           case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8PIN);  break;
    10fc:	a5 e3       	ldi	r26, 0x35	; 53
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e3       	ldi	r30, 0x35	; 53
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_u8SetPinValue+0x1ce>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_u8SetPinValue+0x1ca>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	19 c0       	rjmp	.+50     	; 0x1156 <DIO_u8SetPinValue+0x20a>
			           case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8PIN);  break;
    1124:	a2 e3       	ldi	r26, 0x32	; 50
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e2 e3       	ldi	r30, 0x32	; 50
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_u8SetPinValue+0x1f6>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_u8SetPinValue+0x1f2>
    1146:	84 2b       	or	r24, r20
    1148:	8c 93       	st	X, r24
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <DIO_u8SetPinValue+0x20a>
			           default          :    Local_u8ErrorState =1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_u8SetPinValue+0x20a>

		}
	}
	else
	{
		Local_u8ErrorState =1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
}
    1158:	28 96       	adiw	r28, 0x08	; 8
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PORT , u8 Copy_u8Value)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <DIO_u8SetPortValue+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <DIO_u8SetPortValue+0x8>
    1172:	0f 92       	push	r0
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	8a 83       	std	Y+2, r24	; 0x02
    117a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    117c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PORT)
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3d 83       	std	Y+5, r19	; 0x05
    1186:	2c 83       	std	Y+4, r18	; 0x04
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	d1 f0       	breq	.+52     	; 0x11c6 <DIO_u8SetPortValue+0x5c>
    1192:	2c 81       	ldd	r18, Y+4	; 0x04
    1194:	3d 81       	ldd	r19, Y+5	; 0x05
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	2c f4       	brge	.+10     	; 0x11a6 <DIO_u8SetPortValue+0x3c>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	61 f0       	breq	.+24     	; 0x11bc <DIO_u8SetPortValue+0x52>
    11a4:	1f c0       	rjmp	.+62     	; 0x11e4 <DIO_u8SetPortValue+0x7a>
    11a6:	2c 81       	ldd	r18, Y+4	; 0x04
    11a8:	3d 81       	ldd	r19, Y+5	; 0x05
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	81 f0       	breq	.+32     	; 0x11d0 <DIO_u8SetPortValue+0x66>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	91 05       	cpc	r25, r1
    11b8:	81 f0       	breq	.+32     	; 0x11da <DIO_u8SetPortValue+0x70>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <DIO_u8SetPortValue+0x7a>
	{
	 case DIO_u8PORTA:  PORTA = Copy_u8Value ;  break;
    11bc:	eb e3       	ldi	r30, 0x3B	; 59
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	80 83       	st	Z, r24
    11c4:	11 c0       	rjmp	.+34     	; 0x11e8 <DIO_u8SetPortValue+0x7e>
	 case DIO_u8PORTB:  PORTB = Copy_u8Value ;  break;
    11c6:	e8 e3       	ldi	r30, 0x38	; 56
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	80 83       	st	Z, r24
    11ce:	0c c0       	rjmp	.+24     	; 0x11e8 <DIO_u8SetPortValue+0x7e>
	 case DIO_u8PORTC:  PORTC =Copy_u8Value  ;  break;
    11d0:	e5 e3       	ldi	r30, 0x35	; 53
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	80 83       	st	Z, r24
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <DIO_u8SetPortValue+0x7e>
	 case DIO_u8PORTD:  PORTD =Copy_u8Value  ;  break;
    11da:	e2 e3       	ldi	r30, 0x32	; 50
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	80 83       	st	Z, r24
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_u8SetPortValue+0x7e>
	 default         : Local_u8ErrorState =1;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PORT , u8 Copy_u8PIN , u8 * Copy_Pu8Value)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	27 97       	sbiw	r28, 0x07	; 7
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	8a 83       	std	Y+2, r24	; 0x02
    1210:	6b 83       	std	Y+3, r22	; 0x03
    1212:	5d 83       	std	Y+5, r21	; 0x05
    1214:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1216:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PIN <= DIO_u8PIN7 && Copy_Pu8Value != NULL)
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	88 30       	cpi	r24, 0x08	; 8
    121c:	08 f0       	brcs	.+2      	; 0x1220 <DIO_u8GetPinValue+0x26>
    121e:	79 c0       	rjmp	.+242    	; 0x1312 <DIO_u8GetPinValue+0x118>
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	09 f4       	brne	.+2      	; 0x122a <DIO_u8GetPinValue+0x30>
    1228:	74 c0       	rjmp	.+232    	; 0x1312 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8PORT)
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	3f 83       	std	Y+7, r19	; 0x07
    1232:	2e 83       	std	Y+6, r18	; 0x06
    1234:	4e 81       	ldd	r20, Y+6	; 0x06
    1236:	5f 81       	ldd	r21, Y+7	; 0x07
    1238:	41 30       	cpi	r20, 0x01	; 1
    123a:	51 05       	cpc	r21, r1
    123c:	59 f1       	breq	.+86     	; 0x1294 <DIO_u8GetPinValue+0x9a>
    123e:	8e 81       	ldd	r24, Y+6	; 0x06
    1240:	9f 81       	ldd	r25, Y+7	; 0x07
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	91 05       	cpc	r25, r1
    1246:	34 f4       	brge	.+12     	; 0x1254 <DIO_u8GetPinValue+0x5a>
    1248:	2e 81       	ldd	r18, Y+6	; 0x06
    124a:	3f 81       	ldd	r19, Y+7	; 0x07
    124c:	21 15       	cp	r18, r1
    124e:	31 05       	cpc	r19, r1
    1250:	69 f0       	breq	.+26     	; 0x126c <DIO_u8GetPinValue+0x72>
    1252:	5c c0       	rjmp	.+184    	; 0x130c <DIO_u8GetPinValue+0x112>
    1254:	4e 81       	ldd	r20, Y+6	; 0x06
    1256:	5f 81       	ldd	r21, Y+7	; 0x07
    1258:	42 30       	cpi	r20, 0x02	; 2
    125a:	51 05       	cpc	r21, r1
    125c:	79 f1       	breq	.+94     	; 0x12bc <DIO_u8GetPinValue+0xc2>
    125e:	8e 81       	ldd	r24, Y+6	; 0x06
    1260:	9f 81       	ldd	r25, Y+7	; 0x07
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	91 05       	cpc	r25, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <DIO_u8GetPinValue+0x70>
    1268:	3d c0       	rjmp	.+122    	; 0x12e4 <DIO_u8GetPinValue+0xea>
    126a:	50 c0       	rjmp	.+160    	; 0x130c <DIO_u8GetPinValue+0x112>
		{
		     case DIO_u8PORTA:  * Copy_Pu8Value = GET_BIT(PINA , Copy_u8PIN) ;  break;
    126c:	e9 e3       	ldi	r30, 0x39	; 57
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a9 01       	movw	r20, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_u8GetPinValue+0x8a>
    1280:	55 95       	asr	r21
    1282:	47 95       	ror	r20
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_u8GetPinValue+0x86>
    1288:	ca 01       	movw	r24, r20
    128a:	81 70       	andi	r24, 0x01	; 1
    128c:	ec 81       	ldd	r30, Y+4	; 0x04
    128e:	fd 81       	ldd	r31, Y+5	; 0x05
    1290:	80 83       	st	Z, r24
    1292:	41 c0       	rjmp	.+130    	; 0x1316 <DIO_u8GetPinValue+0x11c>
		     case DIO_u8PORTB:  * Copy_Pu8Value = GET_BIT(PINB , Copy_u8PIN) ;  break;
    1294:	e6 e3       	ldi	r30, 0x36	; 54
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a9 01       	movw	r20, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_u8GetPinValue+0xb2>
    12a8:	55 95       	asr	r21
    12aa:	47 95       	ror	r20
    12ac:	8a 95       	dec	r24
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_u8GetPinValue+0xae>
    12b0:	ca 01       	movw	r24, r20
    12b2:	81 70       	andi	r24, 0x01	; 1
    12b4:	ec 81       	ldd	r30, Y+4	; 0x04
    12b6:	fd 81       	ldd	r31, Y+5	; 0x05
    12b8:	80 83       	st	Z, r24
    12ba:	2d c0       	rjmp	.+90     	; 0x1316 <DIO_u8GetPinValue+0x11c>
		     case DIO_u8PORTC:  * Copy_Pu8Value = GET_BIT(PINC , Copy_u8PIN) ;  break;
    12bc:	e3 e3       	ldi	r30, 0x33	; 51
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_u8GetPinValue+0xda>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_u8GetPinValue+0xd6>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	ec 81       	ldd	r30, Y+4	; 0x04
    12de:	fd 81       	ldd	r31, Y+5	; 0x05
    12e0:	80 83       	st	Z, r24
    12e2:	19 c0       	rjmp	.+50     	; 0x1316 <DIO_u8GetPinValue+0x11c>
		     case DIO_u8PORTD:  * Copy_Pu8Value = GET_BIT(PIND , Copy_u8PIN) ;  break;
    12e4:	e0 e3       	ldi	r30, 0x30	; 48
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a9 01       	movw	r20, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_u8GetPinValue+0x102>
    12f8:	55 95       	asr	r21
    12fa:	47 95       	ror	r20
    12fc:	8a 95       	dec	r24
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_u8GetPinValue+0xfe>
    1300:	ca 01       	movw	r24, r20
    1302:	81 70       	andi	r24, 0x01	; 1
    1304:	ec 81       	ldd	r30, Y+4	; 0x04
    1306:	fd 81       	ldd	r31, Y+5	; 0x05
    1308:	80 83       	st	Z, r24
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <DIO_u8GetPinValue+0x11c>
			 default : Local_u8ErrorState =1 ;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState =1;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
}
    1318:	27 96       	adiw	r28, 0x07	; 7
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <EXTI_voidInt0init>:
void(*EXTI_pvInt0Func)(void) = 0;
void(*EXTI_pvInt1Func)(void) = 0;
void(*EXTI_pvInt2Func)(void) = 0;

void EXTI_voidInt0init(void) /*Pin PD2*/
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
        /* set sense control for INT0 to low level */
        CLR_BIT(MCUCR, MCUCR_ISC00);
        CLR_BIT(MCUCR, MCUCR_ISC01);
    #elif INT0_SENSE == RISING_EDGE
        /* set sense control for INT0 to rising edge */
        SET_BIT(MCUCR, MCUCR_ISC00);
    1332:	a5 e5       	ldi	r26, 0x55	; 85
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e5 e5       	ldi	r30, 0x55	; 85
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	81 60       	ori	r24, 0x01	; 1
    133e:	8c 93       	st	X, r24
        SET_BIT(MCUCR, MCUCR_ISC01);
    1340:	a5 e5       	ldi	r26, 0x55	; 85
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e5 e5       	ldi	r30, 0x55	; 85
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	82 60       	ori	r24, 0x02	; 2
    134c:	8c 93       	st	X, r24
    #else
        //#error "Invalid INT0_SENSE configuration"
    #endif

    #if INT0_INIT_STATE == ENABLED
        SET_BIT(GICR, GICR_INT0);
    134e:	ab e5       	ldi	r26, 0x5B	; 91
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	eb e5       	ldi	r30, 0x5B	; 91
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 64       	ori	r24, 0x40	; 64
    135a:	8c 93       	st	X, r24
    #elif INT0_INIT_STATE == DISABLED
        CLR_BIT(GICR, GICR_INT0);
    #else
        #error "Invalid INT0_INIT_STATE configuration"
    #endif
}
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <EXTI_voidInt1init>:

void EXTI_voidInt1init(void) /*Pin PD3*/
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
        /* set sense control for INT1 to falling edge */
        CLR_BIT(MCUCR, MCUCR_ISC10);
        SET_BIT(MCUCR, MCUCR_ISC11);
    #elif INT1_SENSE == RISING_EDGE
        /* set sense control for INT1 to rising edge */
        SET_BIT(MCUCR, MCUCR_ISC10);
    136a:	a5 e5       	ldi	r26, 0x55	; 85
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e5       	ldi	r30, 0x55	; 85
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	84 60       	ori	r24, 0x04	; 4
    1376:	8c 93       	st	X, r24
        SET_BIT(MCUCR, MCUCR_ISC11);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	88 60       	ori	r24, 0x08	; 8
    1384:	8c 93       	st	X, r24
    #else
        #error "Invalid INT1_SENSE configuration"
    #endif

    #if INT1_INIT_STATE == ENABLED
        SET_BIT(GICR, GICR_INT1);
    1386:	ab e5       	ldi	r26, 0x5B	; 91
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	eb e5       	ldi	r30, 0x5B	; 91
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	8c 93       	st	X, r24
    #elif INT1_INIT_STATE == DISABLED
        CLR_BIT(GICR, GICR_INT1);
    #else
        #error "Invalid INT1_INIT_STATE configuration"
    #endif
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <EXTI_voidInt2init>:

void EXTI_voidInt2init(void) /*Pin PB2*/
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    #if INT2_SENSE == FALLING_EDGE
        /* set sense control for INT2 to falling edge */
        CLR_BIT(MCUCSR, MCUCSR_INT2);
    #elif INT2_SENSE == RISING_EDGE
        /* set sense control for INT2 to rising edge */
        SET_BIT(MCUCSR, MCUCSR_INT2);
    13a2:	a4 e5       	ldi	r26, 0x54	; 84
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e4 e5       	ldi	r30, 0x54	; 84
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 64       	ori	r24, 0x40	; 64
    13ae:	8c 93       	st	X, r24
    #else
        #error "Invalid INT2_SENSE configuration"
    #endif

    #if INT2_INIT_STATE == ENABLED
        SET_BIT(GICR, GICR_INT2);
    13b0:	ab e5       	ldi	r26, 0x5B	; 91
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	eb e5       	ldi	r30, 0x5B	; 91
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 62       	ori	r24, 0x20	; 32
    13bc:	8c 93       	st	X, r24
    #elif INT2_INIT_STATE == DISABLED
        CLR_BIT(GICR, GICR_INT2);
    #else
        #error "Invalid INT2_INIT_STATE configuration"
    #endif
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <EXTI_u8INT0SetSenseCtrl>:
// post puild
u8 EXTI_u8INT0SetSenseCtrl(u8 senseControl)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <EXTI_u8INT0SetSenseCtrl+0x6>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <EXTI_u8INT0SetSenseCtrl+0x8>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8ReturnState = 0;
    13d2:	19 82       	std	Y+1, r1	; 0x01
    switch(senseControl)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3c 83       	std	Y+4, r19	; 0x04
    13dc:	2b 83       	std	Y+3, r18	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	82 30       	cpi	r24, 0x02	; 2
    13e4:	91 05       	cpc	r25, r1
    13e6:	29 f1       	breq	.+74     	; 0x1432 <EXTI_u8INT0SetSenseCtrl+0x6e>
    13e8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ea:	3c 81       	ldd	r19, Y+4	; 0x04
    13ec:	23 30       	cpi	r18, 0x03	; 3
    13ee:	31 05       	cpc	r19, r1
    13f0:	34 f4       	brge	.+12     	; 0x13fe <EXTI_u8INT0SetSenseCtrl+0x3a>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	61 f0       	breq	.+24     	; 0x1414 <EXTI_u8INT0SetSenseCtrl+0x50>
    13fc:	47 c0       	rjmp	.+142    	; 0x148c <EXTI_u8INT0SetSenseCtrl+0xc8>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	23 30       	cpi	r18, 0x03	; 3
    1404:	31 05       	cpc	r19, r1
    1406:	21 f1       	breq	.+72     	; 0x1450 <EXTI_u8INT0SetSenseCtrl+0x8c>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	91 05       	cpc	r25, r1
    1410:	71 f1       	breq	.+92     	; 0x146e <EXTI_u8INT0SetSenseCtrl+0xaa>
    1412:	3c c0       	rjmp	.+120    	; 0x148c <EXTI_u8INT0SetSenseCtrl+0xc8>
    {
        case LOW_LEVEL:
            CLR_BIT(MCUCR, MCUCR_ISC00);
    1414:	a5 e5       	ldi	r26, 0x55	; 85
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e5       	ldi	r30, 0x55	; 85
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8e 7f       	andi	r24, 0xFE	; 254
    1420:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC01);
    1422:	a5 e5       	ldi	r26, 0x55	; 85
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e5       	ldi	r30, 0x55	; 85
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8d 7f       	andi	r24, 0xFD	; 253
    142e:	8c 93       	st	X, r24
    1430:	2f c0       	rjmp	.+94     	; 0x1490 <EXTI_u8INT0SetSenseCtrl+0xcc>
            break;
        case ANY_LOGICAL_change:
            SET_BIT(MCUCR, MCUCR_ISC00);
    1432:	a5 e5       	ldi	r26, 0x55	; 85
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e5       	ldi	r30, 0x55	; 85
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	81 60       	ori	r24, 0x01	; 1
    143e:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC01);
    1440:	a5 e5       	ldi	r26, 0x55	; 85
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e5       	ldi	r30, 0x55	; 85
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8d 7f       	andi	r24, 0xFD	; 253
    144c:	8c 93       	st	X, r24
    144e:	20 c0       	rjmp	.+64     	; 0x1490 <EXTI_u8INT0SetSenseCtrl+0xcc>
            break;
        case FALLING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC01);
    1450:	a5 e5       	ldi	r26, 0x55	; 85
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e5       	ldi	r30, 0x55	; 85
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	82 60       	ori	r24, 0x02	; 2
    145c:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC00);
    145e:	a5 e5       	ldi	r26, 0x55	; 85
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e5       	ldi	r30, 0x55	; 85
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8e 7f       	andi	r24, 0xFE	; 254
    146a:	8c 93       	st	X, r24
    146c:	11 c0       	rjmp	.+34     	; 0x1490 <EXTI_u8INT0SetSenseCtrl+0xcc>
            break;
        case RISING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC00);
    146e:	a5 e5       	ldi	r26, 0x55	; 85
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e5       	ldi	r30, 0x55	; 85
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    147c:	a5 e5       	ldi	r26, 0x55	; 85
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e5       	ldi	r30, 0x55	; 85
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	82 60       	ori	r24, 0x02	; 2
    1488:	8c 93       	st	X, r24
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <EXTI_u8INT0SetSenseCtrl+0xcc>
            break;
        default:
            local_u8ReturnState = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_u8ReturnState;
    1490:	89 81       	ldd	r24, Y+1	; 0x01
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <EXTI_u8INT1SetSenseCtrl>:

u8 EXTI_u8INT1SetSenseCtrl(u8 senseControl)  
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <EXTI_u8INT1SetSenseCtrl+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <EXTI_u8INT1SetSenseCtrl+0x8>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8ReturnState = 0;
    14ae:	19 82       	std	Y+1, r1	; 0x01
    switch(senseControl)
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3c 83       	std	Y+4, r19	; 0x04
    14b8:	2b 83       	std	Y+3, r18	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	91 05       	cpc	r25, r1
    14c2:	29 f1       	breq	.+74     	; 0x150e <EXTI_u8INT1SetSenseCtrl+0x6e>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	23 30       	cpi	r18, 0x03	; 3
    14ca:	31 05       	cpc	r19, r1
    14cc:	34 f4       	brge	.+12     	; 0x14da <EXTI_u8INT1SetSenseCtrl+0x3a>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <EXTI_u8INT1SetSenseCtrl+0x50>
    14d8:	47 c0       	rjmp	.+142    	; 0x1568 <EXTI_u8INT1SetSenseCtrl+0xc8>
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	3c 81       	ldd	r19, Y+4	; 0x04
    14de:	23 30       	cpi	r18, 0x03	; 3
    14e0:	31 05       	cpc	r19, r1
    14e2:	21 f1       	breq	.+72     	; 0x152c <EXTI_u8INT1SetSenseCtrl+0x8c>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	91 05       	cpc	r25, r1
    14ec:	71 f1       	breq	.+92     	; 0x154a <EXTI_u8INT1SetSenseCtrl+0xaa>
    14ee:	3c c0       	rjmp	.+120    	; 0x1568 <EXTI_u8INT1SetSenseCtrl+0xc8>
    {
        case LOW_LEVEL:
            CLR_BIT(MCUCR, MCUCR_ISC10);
    14f0:	a5 e5       	ldi	r26, 0x55	; 85
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e5 e5       	ldi	r30, 0x55	; 85
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8b 7f       	andi	r24, 0xFB	; 251
    14fc:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
    14fe:	a5 e5       	ldi	r26, 0x55	; 85
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e5       	ldi	r30, 0x55	; 85
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	87 7f       	andi	r24, 0xF7	; 247
    150a:	8c 93       	st	X, r24
    150c:	2f c0       	rjmp	.+94     	; 0x156c <EXTI_u8INT1SetSenseCtrl+0xcc>
            break;
        case ANY_LOGICAL_change:
            SET_BIT(MCUCR, MCUCR_ISC10);
    150e:	a5 e5       	ldi	r26, 0x55	; 85
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e5       	ldi	r30, 0x55	; 85
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	84 60       	ori	r24, 0x04	; 4
    151a:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
    151c:	a5 e5       	ldi	r26, 0x55	; 85
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e5       	ldi	r30, 0x55	; 85
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	87 7f       	andi	r24, 0xF7	; 247
    1528:	8c 93       	st	X, r24
    152a:	20 c0       	rjmp	.+64     	; 0x156c <EXTI_u8INT1SetSenseCtrl+0xcc>
            break;
        case FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCR_ISC10);
    152c:	a5 e5       	ldi	r26, 0x55	; 85
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e5       	ldi	r30, 0x55	; 85
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8b 7f       	andi	r24, 0xFB	; 251
    1538:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
    153a:	a5 e5       	ldi	r26, 0x55	; 85
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e5       	ldi	r30, 0x55	; 85
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	88 60       	ori	r24, 0x08	; 8
    1546:	8c 93       	st	X, r24
    1548:	11 c0       	rjmp	.+34     	; 0x156c <EXTI_u8INT1SetSenseCtrl+0xcc>
            break;
        case RISING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC10);
    154a:	a5 e5       	ldi	r26, 0x55	; 85
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e5       	ldi	r30, 0x55	; 85
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	84 60       	ori	r24, 0x04	; 4
    1556:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
    1558:	a5 e5       	ldi	r26, 0x55	; 85
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e5       	ldi	r30, 0x55	; 85
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 60       	ori	r24, 0x08	; 8
    1564:	8c 93       	st	X, r24
    1566:	02 c0       	rjmp	.+4      	; 0x156c <EXTI_u8INT1SetSenseCtrl+0xcc>
            break;
        default:
            local_u8ReturnState = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_u8ReturnState;
    156c:	89 81       	ldd	r24, Y+1	; 0x01
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <EXTI_u8INT2SetSenseCtrl>:

u8 EXTI_u8INT2SetSenseCtrl(u8 senseControl)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <EXTI_u8INT2SetSenseCtrl+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <EXTI_u8INT2SetSenseCtrl+0x8>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8ReturnState = 0;
    158a:	19 82       	std	Y+1, r1	; 0x01
    switch(senseControl)
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3c 83       	std	Y+4, r19	; 0x04
    1594:	2b 83       	std	Y+3, r18	; 0x03
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	83 30       	cpi	r24, 0x03	; 3
    159c:	91 05       	cpc	r25, r1
    159e:	31 f0       	breq	.+12     	; 0x15ac <EXTI_u8INT2SetSenseCtrl+0x30>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	24 30       	cpi	r18, 0x04	; 4
    15a6:	31 05       	cpc	r19, r1
    15a8:	49 f0       	breq	.+18     	; 0x15bc <EXTI_u8INT2SetSenseCtrl+0x40>
    15aa:	10 c0       	rjmp	.+32     	; 0x15cc <EXTI_u8INT2SetSenseCtrl+0x50>
    {
        case FALLING_EDGE:
            CLR_BIT(MCUCSR, MCUCSR_INT2);
    15ac:	a4 e5       	ldi	r26, 0x54	; 84
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e4 e5       	ldi	r30, 0x54	; 84
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8f 7b       	andi	r24, 0xBF	; 191
    15b8:	8c 93       	st	X, r24
    15ba:	0a c0       	rjmp	.+20     	; 0x15d0 <EXTI_u8INT2SetSenseCtrl+0x54>
            break;
        case RISING_EDGE:
            SET_BIT(MCUCSR, MCUCSR_INT2);
    15bc:	a4 e5       	ldi	r26, 0x54	; 84
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e4 e5       	ldi	r30, 0x54	; 84
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 64       	ori	r24, 0x40	; 64
    15c8:	8c 93       	st	X, r24
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <EXTI_u8INT2SetSenseCtrl+0x54>
            break;
        default:
            local_u8ReturnState = 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_u8ReturnState;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <EXTI_u8INTEnable>:

u8 EXTI_u8INTEnable(u8 INT)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <EXTI_u8INTEnable+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <EXTI_u8INTEnable+0x8>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8ReturnState = 0;
    15ee:	19 82       	std	Y+1, r1	; 0x01
    switch(INT)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3c 83       	std	Y+4, r19	; 0x04
    15f8:	2b 83       	std	Y+3, r18	; 0x03
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	86 30       	cpi	r24, 0x06	; 6
    1600:	91 05       	cpc	r25, r1
    1602:	59 f0       	breq	.+22     	; 0x161a <EXTI_u8INTEnable+0x3a>
    1604:	2b 81       	ldd	r18, Y+3	; 0x03
    1606:	3c 81       	ldd	r19, Y+4	; 0x04
    1608:	27 30       	cpi	r18, 0x07	; 7
    160a:	31 05       	cpc	r19, r1
    160c:	71 f0       	breq	.+28     	; 0x162a <EXTI_u8INTEnable+0x4a>
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	85 30       	cpi	r24, 0x05	; 5
    1614:	91 05       	cpc	r25, r1
    1616:	89 f0       	breq	.+34     	; 0x163a <EXTI_u8INTEnable+0x5a>
    1618:	18 c0       	rjmp	.+48     	; 0x164a <EXTI_u8INTEnable+0x6a>
    {
        case GICR_INT0:
            SET_BIT(GICR, GICR_INT0);
    161a:	ab e5       	ldi	r26, 0x5B	; 91
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	eb e5       	ldi	r30, 0x5B	; 91
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	80 64       	ori	r24, 0x40	; 64
    1626:	8c 93       	st	X, r24
    1628:	12 c0       	rjmp	.+36     	; 0x164e <EXTI_u8INTEnable+0x6e>
            break;
        case GICR_INT1:
            SET_BIT(GICR, GICR_INT1);
    162a:	ab e5       	ldi	r26, 0x5B	; 91
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e5       	ldi	r30, 0x5B	; 91
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	80 68       	ori	r24, 0x80	; 128
    1636:	8c 93       	st	X, r24
    1638:	0a c0       	rjmp	.+20     	; 0x164e <EXTI_u8INTEnable+0x6e>
            break;
        case GICR_INT2:
            SET_BIT(GICR, GICR_INT2);
    163a:	ab e5       	ldi	r26, 0x5B	; 91
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	eb e5       	ldi	r30, 0x5B	; 91
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	80 62       	ori	r24, 0x20	; 32
    1646:	8c 93       	st	X, r24
    1648:	02 c0       	rjmp	.+4      	; 0x164e <EXTI_u8INTEnable+0x6e>
            break;
        default:
            local_u8ReturnState = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_u8ReturnState;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <EXTI_u8INTDisable>:

u8 EXTI_u8INTDisable(u8 INT)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <EXTI_u8INTDisable+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <EXTI_u8INTDisable+0x8>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8ReturnState = 0;
    166c:	19 82       	std	Y+1, r1	; 0x01
    switch(INT)
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	3c 83       	std	Y+4, r19	; 0x04
    1676:	2b 83       	std	Y+3, r18	; 0x03
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	86 30       	cpi	r24, 0x06	; 6
    167e:	91 05       	cpc	r25, r1
    1680:	59 f0       	breq	.+22     	; 0x1698 <EXTI_u8INTDisable+0x3a>
    1682:	2b 81       	ldd	r18, Y+3	; 0x03
    1684:	3c 81       	ldd	r19, Y+4	; 0x04
    1686:	27 30       	cpi	r18, 0x07	; 7
    1688:	31 05       	cpc	r19, r1
    168a:	71 f0       	breq	.+28     	; 0x16a8 <EXTI_u8INTDisable+0x4a>
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	85 30       	cpi	r24, 0x05	; 5
    1692:	91 05       	cpc	r25, r1
    1694:	89 f0       	breq	.+34     	; 0x16b8 <EXTI_u8INTDisable+0x5a>
    1696:	18 c0       	rjmp	.+48     	; 0x16c8 <EXTI_u8INTDisable+0x6a>
    {
        case GICR_INT0:
            CLR_BIT(GICR, GICR_INT0);
    1698:	ab e5       	ldi	r26, 0x5B	; 91
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	eb e5       	ldi	r30, 0x5B	; 91
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 7b       	andi	r24, 0xBF	; 191
    16a4:	8c 93       	st	X, r24
    16a6:	12 c0       	rjmp	.+36     	; 0x16cc <EXTI_u8INTDisable+0x6e>
            break;
        case GICR_INT1:
            CLR_BIT(GICR, GICR_INT1);
    16a8:	ab e5       	ldi	r26, 0x5B	; 91
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e5       	ldi	r30, 0x5B	; 91
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	8f 77       	andi	r24, 0x7F	; 127
    16b4:	8c 93       	st	X, r24
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <EXTI_u8INTDisable+0x6e>
            break;
        case GICR_INT2:
            CLR_BIT(GICR, GICR_INT2);
    16b8:	ab e5       	ldi	r26, 0x5B	; 91
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	eb e5       	ldi	r30, 0x5B	; 91
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8f 7d       	andi	r24, 0xDF	; 223
    16c4:	8c 93       	st	X, r24
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <EXTI_u8INTDisable+0x6e>
            break;
        default:
            local_u8ReturnState = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_u8ReturnState;
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <EXIT_u8int0CallBack>:

u8 EXIT_u8int0CallBack(void (*copy_pvFuncint0)(void))
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <EXIT_u8int0CallBack+0x6>
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	9b 83       	std	Y+3, r25	; 0x03
    16ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_returnState =0;
    16ec:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvFuncint0 == 0)
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	9b 81       	ldd	r25, Y+3	; 0x03
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	19 f4       	brne	.+6      	; 0x16fc <EXIT_u8int0CallBack+0x20>
	{
		/*return error */
		local_returnState =1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <EXIT_u8int0CallBack+0x2c>
	}
	else
	{
		EXTI_pvInt0Func = copy_pvFuncint0;
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	90 93 71 00 	sts	0x0071, r25
    1704:	80 93 70 00 	sts	0x0070, r24
	}
	return local_returnState;
    1708:	89 81       	ldd	r24, Y+1	; 0x01
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <EXIT_u8int1CallBack>:

u8 EXIT_u8int1CallBack(void (*copy_pvFuncint1)(void))
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <EXIT_u8int1CallBack+0x6>
    171c:	0f 92       	push	r0
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	9b 83       	std	Y+3, r25	; 0x03
    1724:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_returnState = 0;
    1726:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvFuncint1 ==  0)
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	19 f4       	brne	.+6      	; 0x1736 <EXIT_u8int1CallBack+0x20>
	{
		/*return error */
		local_returnState =1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	06 c0       	rjmp	.+12     	; 0x1742 <EXIT_u8int1CallBack+0x2c>
	}
	else
	{
		EXTI_pvInt1Func = copy_pvFuncint1;
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	90 93 73 00 	sts	0x0073, r25
    173e:	80 93 72 00 	sts	0x0072, r24
	}
	return local_returnState;
    1742:	89 81       	ldd	r24, Y+1	; 0x01
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <EXIT_u8int2CallBack>:
u8 EXIT_u8int2CallBack(void (*copy_pvFuncint2)(void))
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <EXIT_u8int2CallBack+0x6>
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	9b 83       	std	Y+3, r25	; 0x03
    175e:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_returnState = 0;
    1760:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvFuncint2 ==  0)
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	9b 81       	ldd	r25, Y+3	; 0x03
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	19 f4       	brne	.+6      	; 0x1770 <EXIT_u8int2CallBack+0x20>
	{
		/*return error */
		local_returnState = 1;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	06 c0       	rjmp	.+12     	; 0x177c <EXIT_u8int2CallBack+0x2c>
	}
	else
	{
		EXTI_pvInt2Func=copy_pvFuncint2;
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	9b 81       	ldd	r25, Y+3	; 0x03
    1774:	90 93 75 00 	sts	0x0075, r25
    1778:	80 93 74 00 	sts	0x0074, r24
	}
	return local_returnState;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <__vector_1>:

    /*          ISR of INT0         */
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt0Func();
    17b4:	e0 91 70 00 	lds	r30, 0x0070
    17b8:	f0 91 71 00 	lds	r31, 0x0071
    17bc:	09 95       	icall
}
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	ff 91       	pop	r31
    17c4:	ef 91       	pop	r30
    17c6:	bf 91       	pop	r27
    17c8:	af 91       	pop	r26
    17ca:	9f 91       	pop	r25
    17cc:	8f 91       	pop	r24
    17ce:	7f 91       	pop	r23
    17d0:	6f 91       	pop	r22
    17d2:	5f 91       	pop	r21
    17d4:	4f 91       	pop	r20
    17d6:	3f 91       	pop	r19
    17d8:	2f 91       	pop	r18
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	0f 90       	pop	r0
    17e0:	1f 90       	pop	r1
    17e2:	18 95       	reti

000017e4 <__vector_2>:


/*              ISR of INT1         */
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    17e4:	1f 92       	push	r1
    17e6:	0f 92       	push	r0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt1Func();
    180e:	e0 91 72 00 	lds	r30, 0x0072
    1812:	f0 91 73 00 	lds	r31, 0x0073
    1816:	09 95       	icall
}
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	ff 91       	pop	r31
    181e:	ef 91       	pop	r30
    1820:	bf 91       	pop	r27
    1822:	af 91       	pop	r26
    1824:	9f 91       	pop	r25
    1826:	8f 91       	pop	r24
    1828:	7f 91       	pop	r23
    182a:	6f 91       	pop	r22
    182c:	5f 91       	pop	r21
    182e:	4f 91       	pop	r20
    1830:	3f 91       	pop	r19
    1832:	2f 91       	pop	r18
    1834:	0f 90       	pop	r0
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	0f 90       	pop	r0
    183a:	1f 90       	pop	r1
    183c:	18 95       	reti

0000183e <__vector_3>:


/*              ISR of INT2         */
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    183e:	1f 92       	push	r1
    1840:	0f 92       	push	r0
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	0f 92       	push	r0
    1846:	11 24       	eor	r1, r1
    1848:	2f 93       	push	r18
    184a:	3f 93       	push	r19
    184c:	4f 93       	push	r20
    184e:	5f 93       	push	r21
    1850:	6f 93       	push	r22
    1852:	7f 93       	push	r23
    1854:	8f 93       	push	r24
    1856:	9f 93       	push	r25
    1858:	af 93       	push	r26
    185a:	bf 93       	push	r27
    185c:	ef 93       	push	r30
    185e:	ff 93       	push	r31
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt2Func();
    1868:	e0 91 74 00 	lds	r30, 0x0074
    186c:	f0 91 75 00 	lds	r31, 0x0075
    1870:	09 95       	icall
}
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	7f 91       	pop	r23
    1884:	6f 91       	pop	r22
    1886:	5f 91       	pop	r21
    1888:	4f 91       	pop	r20
    188a:	3f 91       	pop	r19
    188c:	2f 91       	pop	r18
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <GIE_voidEnable>:
#include "STD_TYPEs.h"
#include "BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"
void GIE_voidEnable(void)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    18a0:	af e5       	ldi	r26, 0x5F	; 95
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ef e5       	ldi	r30, 0x5F	; 95
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 68       	ori	r24, 0x80	; 128
    18ac:	8c 93       	st	X, r24
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
     CLR_BIT(SREG,SREG_I);
    18bc:	af e5       	ldi	r26, 0x5F	; 95
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ef e5       	ldi	r30, 0x5F	; 95
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	8f 77       	andi	r24, 0x7F	; 127
    18c8:	8c 93       	st	X, r24
}
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <PIR_Init>:
#include"PIR_Interface.h"
#include"PIR_Config.h"


void PIR_Init(void)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PIR_PORT,PIR_PIN,DIO_u8PIN_INPUT);
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
}
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <PIR_GetState>:
u8 PIR_GetState(u8*Copy_u8ReturnState)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <PIR_GetState+0x6>
    18ee:	0f 92       	push	r0
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	9b 83       	std	Y+3, r25	; 0x03
    18f6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Return_Status = 0;
    18f8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8ReturnState == 0)
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	9b 81       	ldd	r25, Y+3	; 0x03
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	19 f4       	brne	.+6      	; 0x1908 <PIR_GetState+0x20>
	{
		Return_Status =1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <PIR_GetState+0x2e>
	}
	else
	{
		*Copy_u8ReturnState = GET_BIT(PIND,PIR_PIN);
    1908:	e0 e3       	ldi	r30, 0x30	; 48
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	ea 81       	ldd	r30, Y+2	; 0x02
    1912:	fb 81       	ldd	r31, Y+3	; 0x03
    1914:	80 83       	st	Z, r24
	}
	return Return_Status;
    1916:	89 81       	ldd	r24, Y+1	; 0x01

}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <TIMER0_voidsetPReload>:

static void (*callPackFunc_0)(void) = 0;
static void (*callPackFunc_1)(void) = 0;
static void (*callPackFunc_ICU)(void) = 0;
void TIMER0_voidsetPReload(u8 val)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	0f 92       	push	r0
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = val;
    1930:	e2 e5       	ldi	r30, 0x52	; 82
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	80 83       	st	Z, r24
}
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <TIMER0_voidInit>:

void TIMER0_voidInit(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	/*Initialize the  mode condition*/
#if   Waveform_Generation_Mode == NORMAL

	/*Setting the NORMAL mode*/
	CLR_BIT(TCCR0,TCCR0_WGRM01);
    1948:	a3 e5       	ldi	r26, 0x53	; 83
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e3 e5       	ldi	r30, 0x53	; 83
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	87 7f       	andi	r24, 0xF7	; 247
    1954:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGRM00);
    1956:	a3 e5       	ldi	r26, 0x53	; 83
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e3 e5       	ldi	r30, 0x53	; 83
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	8f 7b       	andi	r24, 0xBF	; 191
    1962:	8c 93       	st	X, r24

	/*Peripheral Interrupt Enable*/
	SET_BIT(TIMSK,TMSK_TOIE0);
    1964:	a9 e5       	ldi	r26, 0x59	; 89
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e9 e5       	ldi	r30, 0x59	; 89
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	81 60       	ori	r24, 0x01	; 1
    1970:	8c 93       	st	X, r24

	/*Setting the PreLOad Value */
	TCNT0 = Pre_Load_Value;
    1972:	e2 e5       	ldi	r30, 0x52	; 82
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	88 eb       	ldi	r24, 0xB8	; 184
    1978:	80 83       	st	Z, r24
#endif


#endif
	/*PreScalar division  by 8 */  // Important to be last code to start timer
		TCCR0 &= PRE_SCALE_MASK;
    197a:	a3 e5       	ldi	r26, 0x53	; 83
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e3 e5       	ldi	r30, 0x53	; 83
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	88 7f       	andi	r24, 0xF8	; 248
    1986:	8c 93       	st	X, r24
		TCCR0 |= CLK_SELECT_BIT;
    1988:	a3 e5       	ldi	r26, 0x53	; 83
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e3 e5       	ldi	r30, 0x53	; 83
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	83 60       	ori	r24, 0x03	; 3
    1994:	8c 93       	st	X, r24

}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <timer0_delay>:
void timer0_delay(u16 time_in_ms)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <timer0_delay+0x6>
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <timer0_delay+0x8>
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <timer0_delay+0xa>
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
	u16 overflow_time = (time_in_ms * 1000UL)/2048UL;
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	cc 01       	movw	r24, r24
    19b4:	a0 e0       	ldi	r26, 0x00	; 0
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	28 ee       	ldi	r18, 0xE8	; 232
    19ba:	33 e0       	ldi	r19, 0x03	; 3
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 c3 14 	call	0x2986	; 0x2986 <__mulsi3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	07 2e       	mov	r0, r23
    19ce:	7b e0       	ldi	r23, 0x0B	; 11
    19d0:	b6 95       	lsr	r27
    19d2:	a7 95       	ror	r26
    19d4:	97 95       	ror	r25
    19d6:	87 95       	ror	r24
    19d8:	7a 95       	dec	r23
    19da:	d1 f7       	brne	.-12     	; 0x19d0 <timer0_delay+0x34>
    19dc:	70 2d       	mov	r23, r0
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
	u16 counts=0;
    19e2:	1a 82       	std	Y+2, r1	; 0x02
    19e4:	19 82       	std	Y+1, r1	; 0x01

	CLR_BIT(TCCR0,TCCR0_WGRM01);
    19e6:	a3 e5       	ldi	r26, 0x53	; 83
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e3 e5       	ldi	r30, 0x53	; 83
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	87 7f       	andi	r24, 0xF7	; 247
    19f2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGRM00);
    19f4:	a3 e5       	ldi	r26, 0x53	; 83
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e3 e5       	ldi	r30, 0x53	; 83
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	8f 7b       	andi	r24, 0xBF	; 191
    1a00:	8c 93       	st	X, r24

	CLR_BIT(TCCR0,TCCR0_CS00);
    1a02:	a3 e5       	ldi	r26, 0x53	; 83
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e3 e5       	ldi	r30, 0x53	; 83
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8e 7f       	andi	r24, 0xFE	; 254
    1a0e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1a10:	a3 e5       	ldi	r26, 0x53	; 83
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e3 e5       	ldi	r30, 0x53	; 83
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	82 60       	ori	r24, 0x02	; 2
    1a1c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1a1e:	a3 e5       	ldi	r26, 0x53	; 83
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e3 e5       	ldi	r30, 0x53	; 83
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8b 7f       	andi	r24, 0xFB	; 251
    1a2a:	8c 93       	st	X, r24

	TCNT0 = 0;
    1a2c:	e2 e5       	ldi	r30, 0x52	; 82
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	10 82       	st	Z, r1
    1a32:	15 c0       	rjmp	.+42     	; 0x1a5e <timer0_delay+0xc2>
	while (counts < overflow_time)
	{
	 // Wait until overflow occurs
	 while (!(TIFR & (1 << TIFR_TOV0)));
    1a34:	e8 e5       	ldi	r30, 0x58	; 88
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	b9 f3       	breq	.-18     	; 0x1a34 <timer0_delay+0x98>
	 // Clear overflow flag
	 SET_BIT(TIFR,TIFR_TOV0);
    1a46:	a8 e5       	ldi	r26, 0x58	; 88
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e5       	ldi	r30, 0x58	; 88
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	81 60       	ori	r24, 0x01	; 1
    1a52:	8c 93       	st	X, r24
	 counts++;
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TCCR0,TCCR0_CS00);
	SET_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);

	TCNT0 = 0;
	while (counts < overflow_time)
    1a5e:	29 81       	ldd	r18, Y+1	; 0x01
    1a60:	3a 81       	ldd	r19, Y+2	; 0x02
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	28 17       	cp	r18, r24
    1a68:	39 07       	cpc	r19, r25
    1a6a:	20 f3       	brcs	.-56     	; 0x1a34 <timer0_delay+0x98>
	 while (!(TIFR & (1 << TIFR_TOV0)));
	 // Clear overflow flag
	 SET_BIT(TIFR,TIFR_TOV0);
	 counts++;
	}
	 TCCR0 = 0x00;
    1a6c:	e3 e5       	ldi	r30, 0x53	; 83
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	10 82       	st	Z, r1
}
    1a72:	26 96       	adiw	r28, 0x06	; 6
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <timer0_voidSetCompareValue>:
void timer0_voidSetCompareValue(u8 value)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	0f 92       	push	r0
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value;
    1a90:	ec e5       	ldi	r30, 0x5C	; 92
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	80 83       	st	Z, r24
}
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <TIMER1_voidInit>:



void TIMER1_voidInit(void)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
	{

		if(COMPARE_MATCH_OUTPUT_MODE_TIMER1_FAST_PWM == SET_ON_Top_CLR_ON_COMP)
		{
			// initialize the mode if non inverted
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1aa8:	af e4       	ldi	r26, 0x4F	; 79
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ef e4       	ldi	r30, 0x4F	; 79
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8f 7b       	andi	r24, 0xBF	; 191
    1ab4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1ab6:	af e4       	ldi	r26, 0x4F	; 79
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	ef e4       	ldi	r30, 0x4F	; 79
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	80 68       	ori	r24, 0x80	; 128
    1ac2:	8c 93       	st	X, r24
			// normal port operation
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
		}
		//initialize the mode of the wave generation mode
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    1ac4:	af e4       	ldi	r26, 0x4F	; 79
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ef e4       	ldi	r30, 0x4F	; 79
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	81 60       	ori	r24, 0x01	; 1
    1ad0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1ad2:	af e4       	ldi	r26, 0x4F	; 79
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ef e4       	ldi	r30, 0x4F	; 79
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	82 60       	ori	r24, 0x02	; 2
    1ade:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1ae0:	ae e4       	ldi	r26, 0x4E	; 78
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ee e4       	ldi	r30, 0x4E	; 78
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 60       	ori	r24, 0x08	; 8
    1aec:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1aee:	ae e4       	ldi	r26, 0x4E	; 78
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ee e4       	ldi	r30, 0x4E	; 78
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	80 61       	ori	r24, 0x10	; 16
    1afa:	8c 93       	st	X, r24

		}

#endif
	/*SET the Pre-Scalar Value*/
		TCCR1B &= PRE_SCALE_MASK;
    1afc:	ae e4       	ldi	r26, 0x4E	; 78
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	ee e4       	ldi	r30, 0x4E	; 78
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	88 7f       	andi	r24, 0xF8	; 248
    1b08:	8c 93       	st	X, r24
		TCCR1B |= CLK_64;
    1b0a:	ae e4       	ldi	r26, 0x4E	; 78
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ee e4       	ldi	r30, 0x4E	; 78
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	83 60       	ori	r24, 0x03	; 3
    1b16:	8c 93       	st	X, r24

}
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <timer1_voidSetChannelA_CompareMatch>:
void timer1_voidSetChannelA_CompareMatch(u16 value)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <timer1_voidSetChannelA_CompareMatch+0x6>
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL =  value;
    1b2c:	ea e4       	ldi	r30, 0x4A	; 74
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <TIMER1_voidSetICR>:



void TIMER1_voidSetICR(u16 copy_u16ICRVAL)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <TIMER1_voidSetICR+0x6>
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	/*Set the ICR top value with value for servo motor fast_pwm */
	ICR1L = copy_u16ICRVAL;
    1b50:	e6 e4       	ldi	r30, 0x46	; 70
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	80 83       	st	Z, r24
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <TIMER0_u8SetCallPack_OV>:


u8  TIMER0_u8SetCallPack_OV(void(*CAll_packFunc)(void))
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <TIMER0_u8SetCallPack_OV+0x6>
    1b6c:	0f 92       	push	r0
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	9b 83       	std	Y+3, r25	; 0x03
    1b74:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReturnState = OK;
    1b76:	19 82       	std	Y+1, r1	; 0x01

	if(CAll_packFunc == 0)
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	19 f4       	brne	.+6      	; 0x1b86 <TIMER0_u8SetCallPack_OV+0x20>
	{
		Local_u8ReturnState = NOK;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <TIMER0_u8SetCallPack_OV+0x2c>
	}
	else
	{
		callPackFunc_0 = CAll_packFunc;
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	90 93 77 00 	sts	0x0077, r25
    1b8e:	80 93 76 00 	sts	0x0076, r24
	}
	return Local_u8ReturnState;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <TIMER0_u8SetCallPack_cmp>:

u8  TIMER0_u8SetCallPack_cmp(void(*CAll_packFunc)(void))
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <TIMER0_u8SetCallPack_cmp+0x6>
    1ba6:	0f 92       	push	r0
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	9b 83       	std	Y+3, r25	; 0x03
    1bae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReturnState = OK;
    1bb0:	19 82       	std	Y+1, r1	; 0x01

	if(CAll_packFunc == 0)
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	19 f4       	brne	.+6      	; 0x1bc0 <TIMER0_u8SetCallPack_cmp+0x20>
	{
		Local_u8ReturnState = NOK;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	06 c0       	rjmp	.+12     	; 0x1bcc <TIMER0_u8SetCallPack_cmp+0x2c>
	}
	else
	{
		callPackFunc_0 = CAll_packFunc;
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc4:	90 93 77 00 	sts	0x0077, r25
    1bc8:	80 93 76 00 	sts	0x0076, r24
	}
	return Local_u8ReturnState;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <timer1_voidSetCallBack_OV>:

u8 timer1_voidSetCallBack_OV (void(*callbackfunc)(void))
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <timer1_voidSetCallBack_OV+0x6>
    1be0:	0f 92       	push	r0
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	9b 83       	std	Y+3, r25	; 0x03
    1be8:	8a 83       	std	Y+2, r24	; 0x02
	u8 return_Status = OK;
    1bea:	19 82       	std	Y+1, r1	; 0x01
	if(callbackfunc == 0)
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <timer1_voidSetCallBack_OV+0x20>
	{
		return_Status =NOK;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	06 c0       	rjmp	.+12     	; 0x1c06 <timer1_voidSetCallBack_OV+0x2c>
	}
	else
	{
		callPackFunc_1 = callbackfunc;
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfe:	90 93 79 00 	sts	0x0079, r25
    1c02:	80 93 78 00 	sts	0x0078, r24
	}
    return return_Status;
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <timer1_voidSetCallBack_Cmp>:

u8 timer1_voidSetCallBack_Cmp (void(*callbackfunc)(void))
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <timer1_voidSetCallBack_Cmp+0x6>
    1c1a:	0f 92       	push	r0
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	9b 83       	std	Y+3, r25	; 0x03
    1c22:	8a 83       	std	Y+2, r24	; 0x02
	u8 return_Status = OK;
    1c24:	19 82       	std	Y+1, r1	; 0x01
		if(callbackfunc == 0)
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	19 f4       	brne	.+6      	; 0x1c34 <timer1_voidSetCallBack_Cmp+0x20>
		{
			return_Status =NOK;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	06 c0       	rjmp	.+12     	; 0x1c40 <timer1_voidSetCallBack_Cmp+0x2c>
		}
		else
		{
			callPackFunc_1 = callbackfunc;
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	90 93 79 00 	sts	0x0079, r25
    1c3c:	80 93 78 00 	sts	0x0078, r24
		}
		return return_Status;
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <timer1_set>:
void timer1_set(u16 value)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <timer1_set+0x6>
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = value;
    1c5c:	ec e4       	ldi	r30, 0x4C	; 76
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <read_timer1>:

u16 read_timer1(void)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1c7a:	ec e4       	ldi	r30, 0x4C	; 76
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <ICR_VoidInit>:

void ICR_VoidInit(void)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	/*Set the trigger mode to Rising Edge mode*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    1c90:	ae e4       	ldi	r26, 0x4E	; 78
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ee e4       	ldi	r30, 0x4E	; 78
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 64       	ori	r24, 0x40	; 64
    1c9c:	8c 93       	st	X, r24
	/* Enable ICU Interrupt */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1c9e:	a9 e5       	ldi	r26, 0x59	; 89
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e9 e5       	ldi	r30, 0x59	; 89
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	80 62       	ori	r24, 0x20	; 32
    1caa:	8c 93       	st	X, r24
}
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <IVU_VoidSetTriggerEdge>:
void IVU_VoidSetTriggerEdge(u8 copu_u8Edge)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <IVU_VoidSetTriggerEdge+0x6>
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	8a 83       	std	Y+2, r24	; 0x02
	u8 return_State = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	89 83       	std	Y+1, r24	; 0x01
  if(copu_u8Edge == ICU_RISING_EDGE)
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	41 f4       	brne	.+16     	; 0x1cd8 <IVU_VoidSetTriggerEdge+0x26>
  {
	  SET_BIT(TCCR1B,TCCR1B_ICES1);
    1cc8:	ae e4       	ldi	r26, 0x4E	; 78
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	ee e4       	ldi	r30, 0x4E	; 78
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 64       	ori	r24, 0x40	; 64
    1cd4:	8c 93       	st	X, r24
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <IVU_VoidSetTriggerEdge+0x3a>
  }
  else if(copu_u8Edge == ICU_FALLING_EDGE)
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	88 23       	and	r24, r24
    1cdc:	39 f4       	brne	.+14     	; 0x1cec <IVU_VoidSetTriggerEdge+0x3a>
  {
	  CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1cde:	ae e4       	ldi	r26, 0x4E	; 78
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	ee e4       	ldi	r30, 0x4E	; 78
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8f 7b       	andi	r24, 0xBF	; 191
    1cea:	8c 93       	st	X, r24
  }

}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <ICU_VoidInteruptEnable>:

void ICU_VoidInteruptEnable(void)
{
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1cfe:	a9 e5       	ldi	r26, 0x59	; 89
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e9 e5       	ldi	r30, 0x59	; 89
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	80 62       	ori	r24, 0x20	; 32
    1d0a:	8c 93       	st	X, r24
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <ICU_VoidInteruptDisable>:

void ICU_VoidInteruptDisable(void)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1d1a:	a9 e5       	ldi	r26, 0x59	; 89
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e9 e5       	ldi	r30, 0x59	; 89
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	8f 7d       	andi	r24, 0xDF	; 223
    1d26:	8c 93       	st	X, r24
}
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <ICU_u16ReadCaptureUnit>:

u16 ICU_u16ReadCaptureUnit(void)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
	return ICR1L;
    1d36:	e6 e4       	ldi	r30, 0x46	; 70
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <ICU_voidSetCallBack>:

u8 ICU_voidSetCallBack(void(*SETCallBackFunc)(void))
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <ICU_voidSetCallBack+0x6>
    1d4a:	0f 92       	push	r0
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	9b 83       	std	Y+3, r25	; 0x03
    1d52:	8a 83       	std	Y+2, r24	; 0x02
	u8 Return_state = OK;
    1d54:	19 82       	std	Y+1, r1	; 0x01
	if(SETCallBackFunc == 0)
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <ICU_voidSetCallBack+0x20>
	{
		Return_state = NOK;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <ICU_voidSetCallBack+0x2c>
	}
	else
	{
		callPackFunc_ICU = SETCallBackFunc;
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	9b 81       	ldd	r25, Y+3	; 0x03
    1d68:	90 93 7b 00 	sts	0x007B, r25
    1d6c:	80 93 7a 00 	sts	0x007A, r24
	}
	return Return_state;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <__vector_10>:
/*******************************ISR************************************************/
/*ISR FUNCTION for ctc intrupt fro timer 0*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    1d7e:	1f 92       	push	r1
    1d80:	0f 92       	push	r0
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	0f 92       	push	r0
    1d86:	11 24       	eor	r1, r1
    1d88:	2f 93       	push	r18
    1d8a:	3f 93       	push	r19
    1d8c:	4f 93       	push	r20
    1d8e:	5f 93       	push	r21
    1d90:	6f 93       	push	r22
    1d92:	7f 93       	push	r23
    1d94:	8f 93       	push	r24
    1d96:	9f 93       	push	r25
    1d98:	af 93       	push	r26
    1d9a:	bf 93       	push	r27
    1d9c:	ef 93       	push	r30
    1d9e:	ff 93       	push	r31
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62

	callPackFunc_0();
    1da8:	e0 91 76 00 	lds	r30, 0x0076
    1dac:	f0 91 77 00 	lds	r31, 0x0077
    1db0:	09 95       	icall

}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	0f 90       	pop	r0
    1dd4:	1f 90       	pop	r1
    1dd6:	18 95       	reti

00001dd8 <__vector_11>:
/*ISR FUNCTION for OVER Flow intrupt for timer 0*/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    1dd8:	1f 92       	push	r1
    1dda:	0f 92       	push	r0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	0f 92       	push	r0
    1de0:	11 24       	eor	r1, r1
    1de2:	2f 93       	push	r18
    1de4:	3f 93       	push	r19
    1de6:	4f 93       	push	r20
    1de8:	5f 93       	push	r21
    1dea:	6f 93       	push	r22
    1dec:	7f 93       	push	r23
    1dee:	8f 93       	push	r24
    1df0:	9f 93       	push	r25
    1df2:	af 93       	push	r26
    1df4:	bf 93       	push	r27
    1df6:	ef 93       	push	r30
    1df8:	ff 93       	push	r31
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62

	callPackFunc_0();
    1e02:	e0 91 76 00 	lds	r30, 0x0076
    1e06:	f0 91 77 00 	lds	r31, 0x0077
    1e0a:	09 95       	icall
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	ff 91       	pop	r31
    1e12:	ef 91       	pop	r30
    1e14:	bf 91       	pop	r27
    1e16:	af 91       	pop	r26
    1e18:	9f 91       	pop	r25
    1e1a:	8f 91       	pop	r24
    1e1c:	7f 91       	pop	r23
    1e1e:	6f 91       	pop	r22
    1e20:	5f 91       	pop	r21
    1e22:	4f 91       	pop	r20
    1e24:	3f 91       	pop	r19
    1e26:	2f 91       	pop	r18
    1e28:	0f 90       	pop	r0
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	0f 90       	pop	r0
    1e2e:	1f 90       	pop	r1
    1e30:	18 95       	reti

00001e32 <__vector_9>:
/*ISR FUNCTION for OVER Flow intrupt for timer 1*/
void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    1e32:	1f 92       	push	r1
    1e34:	0f 92       	push	r0
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	0f 92       	push	r0
    1e3a:	11 24       	eor	r1, r1
    1e3c:	2f 93       	push	r18
    1e3e:	3f 93       	push	r19
    1e40:	4f 93       	push	r20
    1e42:	5f 93       	push	r21
    1e44:	6f 93       	push	r22
    1e46:	7f 93       	push	r23
    1e48:	8f 93       	push	r24
    1e4a:	9f 93       	push	r25
    1e4c:	af 93       	push	r26
    1e4e:	bf 93       	push	r27
    1e50:	ef 93       	push	r30
    1e52:	ff 93       	push	r31
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
	callPackFunc_1();
    1e5c:	e0 91 78 00 	lds	r30, 0x0078
    1e60:	f0 91 79 00 	lds	r31, 0x0079
    1e64:	09 95       	icall
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	7f 91       	pop	r23
    1e78:	6f 91       	pop	r22
    1e7a:	5f 91       	pop	r21
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <__vector_7>:
/*ISR FUNCTION for cmp match event(CTC) for timer 1*/
void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
    1e8c:	1f 92       	push	r1
    1e8e:	0f 92       	push	r0
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	0f 92       	push	r0
    1e94:	11 24       	eor	r1, r1
    1e96:	2f 93       	push	r18
    1e98:	3f 93       	push	r19
    1e9a:	4f 93       	push	r20
    1e9c:	5f 93       	push	r21
    1e9e:	6f 93       	push	r22
    1ea0:	7f 93       	push	r23
    1ea2:	8f 93       	push	r24
    1ea4:	9f 93       	push	r25
    1ea6:	af 93       	push	r26
    1ea8:	bf 93       	push	r27
    1eaa:	ef 93       	push	r30
    1eac:	ff 93       	push	r31
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	callPackFunc_1();
    1eb6:	e0 91 78 00 	lds	r30, 0x0078
    1eba:	f0 91 79 00 	lds	r31, 0x0079
    1ebe:	09 95       	icall
}
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	ff 91       	pop	r31
    1ec6:	ef 91       	pop	r30
    1ec8:	bf 91       	pop	r27
    1eca:	af 91       	pop	r26
    1ecc:	9f 91       	pop	r25
    1ece:	8f 91       	pop	r24
    1ed0:	7f 91       	pop	r23
    1ed2:	6f 91       	pop	r22
    1ed4:	5f 91       	pop	r21
    1ed6:	4f 91       	pop	r20
    1ed8:	3f 91       	pop	r19
    1eda:	2f 91       	pop	r18
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <__vector_6>:
/*ISR FUNCTION for ICU */
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	2f 93       	push	r18
    1ef2:	3f 93       	push	r19
    1ef4:	4f 93       	push	r20
    1ef6:	5f 93       	push	r21
    1ef8:	6f 93       	push	r22
    1efa:	7f 93       	push	r23
    1efc:	8f 93       	push	r24
    1efe:	9f 93       	push	r25
    1f00:	af 93       	push	r26
    1f02:	bf 93       	push	r27
    1f04:	ef 93       	push	r30
    1f06:	ff 93       	push	r31
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
	callPackFunc_ICU();
    1f10:	e0 91 7a 00 	lds	r30, 0x007A
    1f14:	f0 91 7b 00 	lds	r31, 0x007B
    1f18:	09 95       	icall
}
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	ff 91       	pop	r31
    1f20:	ef 91       	pop	r30
    1f22:	bf 91       	pop	r27
    1f24:	af 91       	pop	r26
    1f26:	9f 91       	pop	r25
    1f28:	8f 91       	pop	r24
    1f2a:	7f 91       	pop	r23
    1f2c:	6f 91       	pop	r22
    1f2e:	5f 91       	pop	r21
    1f30:	4f 91       	pop	r20
    1f32:	3f 91       	pop	r19
    1f34:	2f 91       	pop	r18
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	0f 90       	pop	r0
    1f3c:	1f 90       	pop	r1
    1f3e:	18 95       	reti

00001f40 <Set_Prescalar>:
void Set_Prescalar(u8 value)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	89 83       	std	Y+1, r24	; 0x01
if(value == 0)
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	88 23       	and	r24, r24
    1f50:	b1 f4       	brne	.+44     	; 0x1f7e <Set_Prescalar+0x3e>
{
	CLR_BIT(TCCR0,TCCR0_CS00);
    1f52:	a3 e5       	ldi	r26, 0x53	; 83
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e3 e5       	ldi	r30, 0x53	; 83
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8e 7f       	andi	r24, 0xFE	; 254
    1f5e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    1f60:	a3 e5       	ldi	r26, 0x53	; 83
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e3 e5       	ldi	r30, 0x53	; 83
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	8d 7f       	andi	r24, 0xFD	; 253
    1f6c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1f6e:	a3 e5       	ldi	r26, 0x53	; 83
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e3 e5       	ldi	r30, 0x53	; 83
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	8b 7f       	andi	r24, 0xFB	; 251
    1f7a:	8c 93       	st	X, r24
    1f7c:	18 c0       	rjmp	.+48     	; 0x1fae <Set_Prescalar+0x6e>
}
else if(value == 3)
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	83 30       	cpi	r24, 0x03	; 3
    1f82:	a9 f4       	brne	.+42     	; 0x1fae <Set_Prescalar+0x6e>
{
	    SET_BIT(TCCR0,TCCR0_CS00);
    1f84:	a3 e5       	ldi	r26, 0x53	; 83
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e3 e5       	ldi	r30, 0x53	; 83
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	81 60       	ori	r24, 0x01	; 1
    1f90:	8c 93       	st	X, r24
	    SET_BIT(TCCR0,TCCR0_CS01);
    1f92:	a3 e5       	ldi	r26, 0x53	; 83
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e3 e5       	ldi	r30, 0x53	; 83
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	82 60       	ori	r24, 0x02	; 2
    1f9e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    1fa0:	a3 e5       	ldi	r26, 0x53	; 83
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e3 e5       	ldi	r30, 0x53	; 83
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8b 7f       	andi	r24, 0xFB	; 251
    1fac:	8c 93       	st	X, r24
}

}
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <timer2_pwm_Init>:
void timer2_pwm_Init(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2,TCCR2_WGM20);
    1fbe:	a5 e4       	ldi	r26, 0x45	; 69
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e5 e4       	ldi	r30, 0x45	; 69
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 64       	ori	r24, 0x40	; 64
    1fca:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
    1fcc:	a5 e4       	ldi	r26, 0x45	; 69
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e5 e4       	ldi	r30, 0x45	; 69
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	88 60       	ori	r24, 0x08	; 8
    1fd8:	8c 93       	st	X, r24

	CLR_BIT(TCCR2,TCCR2_COM20);
    1fda:	a5 e4       	ldi	r26, 0x45	; 69
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e5 e4       	ldi	r30, 0x45	; 69
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8f 7e       	andi	r24, 0xEF	; 239
    1fe6:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_COM21);
    1fe8:	a5 e4       	ldi	r26, 0x45	; 69
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e5 e4       	ldi	r30, 0x45	; 69
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 62       	ori	r24, 0x20	; 32
    1ff4:	8c 93       	st	X, r24

	SET_BIT(TCCR2,TCCR2_CS22);
    1ff6:	a5 e4       	ldi	r26, 0x45	; 69
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e5 e4       	ldi	r30, 0x45	; 69
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	84 60       	ori	r24, 0x04	; 4
    2002:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS20);
    2004:	a5 e4       	ldi	r26, 0x45	; 69
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e5 e4       	ldi	r30, 0x45	; 69
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8e 7f       	andi	r24, 0xFE	; 254
    2010:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS21);
    2012:	a5 e4       	ldi	r26, 0x45	; 69
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e5 e4       	ldi	r30, 0x45	; 69
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8d 7f       	andi	r24, 0xFD	; 253
    201e:	8c 93       	st	X, r24
    //OCR2 = value;
}
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <pwm_timer2>:
void pwm_timer2(u8 val)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	0f 92       	push	r0
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = val;
    2032:	e3 e4       	ldi	r30, 0x43	; 67
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	80 83       	st	Z, r24
}
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <main>:
    .motor_Pin[1].Port = DIO_u8PORTB,
    .motor_Pin[1].Motor_Status = MOTOR_OF
};

int main(void)  // Changed return type to int for standard practice
{
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	c4 55       	subi	r28, 0x54	; 84
    2050:	d0 40       	sbci	r29, 0x00	; 0
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    /* Global Interrupt Enable */
    GIE_voidEnable();
    205c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GIE_voidEnable>
    DC_Motor_Init(&motor1_pin);
    2060:	89 e6       	ldi	r24, 0x69	; 105
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 a3 05 	call	0xb46	; 0xb46 <DC_Motor_Init>
    /*************************************************************/
    /* Timer 0 for counter initialization */
    TIMER0_voidInit();
    2068:	0e 94 a0 0c 	call	0x1940	; 0x1940 <TIMER0_voidInit>
    timer2_pwm_Init();
    206c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <timer2_pwm_Init>
    TIMER0_u8SetCallPack_OV(&ISR_TIMERcount);
    2070:	8d e4       	ldi	r24, 0x4D	; 77
    2072:	94 e1       	ldi	r25, 0x14	; 20
    2074:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <TIMER0_u8SetCallPack_OV>


    /*************************************************************/
    /* EXTI 0 for speed up button initialization */
    EXTI_voidInt0init();
    2078:	0e 94 95 09 	call	0x132a	; 0x132a <EXTI_voidInt0init>
    EXTI_u8INT0SetSenseCtrl(RISING_EDGE);
    207c:	84 e0       	ldi	r24, 0x04	; 4
    207e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <EXTI_u8INT0SetSenseCtrl>
    EXIT_u8int0CallBack(&speed_up);
    2082:	86 ea       	ldi	r24, 0xA6	; 166
    2084:	94 e1       	ldi	r25, 0x14	; 20
    2086:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <EXIT_u8int0CallBack>
    /*************************************************************/
    /* EXTI 1 for speed down button initialization */
    EXTI_voidInt1init();
    208a:	0e 94 b1 09 	call	0x1362	; 0x1362 <EXTI_voidInt1init>
    EXTI_u8INT1SetSenseCtrl(RISING_EDGE);
    208e:	84 e0       	ldi	r24, 0x04	; 4
    2090:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <EXTI_u8INT1SetSenseCtrl>
    EXIT_u8int1CallBack(&speed_down);
    2094:	8f e8       	ldi	r24, 0x8F	; 143
    2096:	94 e1       	ldi	r25, 0x14	; 20
    2098:	0e 94 8b 0b 	call	0x1716	; 0x1716 <EXIT_u8int1CallBack>
    /*************************************************************/


    /*************************************************************/
    /* Initialize motor pin input */
    DC_Motor_Init(&motor1_pin);
    209c:	89 e6       	ldi	r24, 0x69	; 105
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DC_Motor_Init>
    DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_INPUT);
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	62 e0       	ldi	r22, 0x02	; 2
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN3, DIO_u8PIN_INPUT);
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	63 e0       	ldi	r22, 0x03	; 3
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    /* OCR1A -> Generating PWM */
    DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN7, DIO_u8PIN_Output);
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	67 e0       	ldi	r22, 0x07	; 7
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>

    /*************************************************************/
    /* Initialize PIR pin input */
    PIR_Init();
    20c2:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <PIR_Init>

    /*************************************************************/
    /* Initialize stop button pin input */
    DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN4, DIO_u8PIN_INPUT);
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	64 e0       	ldi	r22, 0x04	; 4
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    /* Initialize resume button pin input */
    DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN6, DIO_u8PIN_INPUT);
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	66 e0       	ldi	r22, 0x06	; 6
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    /* Initialize additional pin for resume button input */
    DIO_u8SetPinDirection(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_INPUT);
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	64 e0       	ldi	r22, 0x04	; 4
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    /* Initialize additional pin for speed_up button input */
    DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PIN_INPUT);
    20e4:	83 e0       	ldi	r24, 0x03	; 3
    20e6:	62 e0       	ldi	r22, 0x02	; 2
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    /* Initialize additional pin for speed_down button input */
    DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN3, DIO_u8PIN_INPUT);
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	63 e0       	ldi	r22, 0x03	; 3
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    /* Initialize additional pin for PWM button output */
      DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN7, DIO_u8PIN_Output);
    20f8:	83 e0       	ldi	r24, 0x03	; 3
    20fa:	67 e0       	ldi	r22, 0x07	; 7
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    /*************************************************************/
    /* Initialize PORTA -> output */
    DIO_u8SetPortDirection(DIO_u8PORTA, 0x3f);
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	6f e3       	ldi	r22, 0x3F	; 63
    2106:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_u8SetPortDirection>
    /* Initialize 4 PINS in PORTC -> output */
    DIO_u8SetPortDirection(DIO_u8PORTC, 0x0f);
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	6f e0       	ldi	r22, 0x0F	; 15
    210e:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_u8SetPortDirection>

    pwm_timer2(10);
    2112:	8a e0       	ldi	r24, 0x0A	; 10
    2114:	0e 94 13 10 	call	0x2026	; 0x2026 <pwm_timer2>
    /*************************************************************/
    while (1)
    {
        PIR_GetState(&PIR_Status);
    2118:	81 e8       	ldi	r24, 0x81	; 129
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <PIR_GetState>
        DIO_u8GetPinValue(DIO_u8PORTD, DIO_u8PIN6, &resume_button);
    2120:	22 e8       	ldi	r18, 0x82	; 130
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	66 e0       	ldi	r22, 0x06	; 6
    2128:	a9 01       	movw	r20, r18
    212a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_u8GetPinValue>
        DIO_u8GetPinValue(DIO_u8PORTD, DIO_u8PIN4, &stop_button);
    212e:	23 e8       	ldi	r18, 0x83	; 131
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	83 e0       	ldi	r24, 0x03	; 3
    2134:	64 e0       	ldi	r22, 0x04	; 4
    2136:	a9 01       	movw	r20, r18
    2138:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_u8GetPinValue>
        DIO_u8GetPinValue(DIO_u8PORTC, DIO_u8PIN4, &reset_status_pin);
    213c:	24 e8       	ldi	r18, 0x84	; 132
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	64 e0       	ldi	r22, 0x04	; 4
    2144:	a9 01       	movw	r20, r18
    2146:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_u8GetPinValue>
        /*************************************************************/
        if (PIR_Status == 1)
    214a:	80 91 81 00 	lds	r24, 0x0081
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	09 f0       	breq	.+2      	; 0x2154 <main+0x112>
    2152:	9b c3       	rjmp	.+1846   	; 0x288a <main+0x848>
        {
        	pwm_timer2(duty_cycle);
    2154:	80 91 68 00 	lds	r24, 0x0068
    2158:	0e 94 13 10 	call	0x2026	; 0x2026 <pwm_timer2>
        	DIO_u8SetPortValue(DIO_u8PORTA,0x3f);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	6f e3       	ldi	r22, 0x3F	; 63
    2160:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
        	DIO_u8SetPortValue(DIO_u8PORTC,(u8)second%10);
    2164:	80 91 7c 00 	lds	r24, 0x007C
    2168:	9a e0       	ldi	r25, 0x0A	; 10
    216a:	69 2f       	mov	r22, r25
    216c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__udivmodqi4>
    2170:	89 2f       	mov	r24, r25
    2172:	98 2f       	mov	r25, r24
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	69 2f       	mov	r22, r25
    2178:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
            DIO_u8SetPortValue(DIO_u8PORTA,0x20);
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	60 e2       	ldi	r22, 0x20	; 32
    2180:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
    2184:	fe 01       	movw	r30, r28
    2186:	ef 5a       	subi	r30, 0xAF	; 175
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a0 e2       	ldi	r26, 0x20	; 32
    2190:	b1 e4       	ldi	r27, 0x41	; 65
    2192:	80 83       	st	Z, r24
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	a2 83       	std	Z+2, r26	; 0x02
    2198:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219a:	8e 01       	movw	r16, r28
    219c:	03 5b       	subi	r16, 0xB3	; 179
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	fe 01       	movw	r30, r28
    21a2:	ef 5a       	subi	r30, 0xAF	; 175
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	4a e7       	ldi	r20, 0x7A	; 122
    21b4:	53 e4       	ldi	r21, 0x43	; 67
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	80 83       	st	Z, r24
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	a2 83       	std	Z+2, r26	; 0x02
    21c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c8:	fe 01       	movw	r30, r28
    21ca:	e3 5b       	subi	r30, 0xB3	; 179
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	44 f4       	brge	.+16     	; 0x21f6 <main+0x1b4>
		__ticks = 1;
    21e6:	fe 01       	movw	r30, r28
    21e8:	e5 5b       	subi	r30, 0xB5	; 181
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
    21f4:	64 c0       	rjmp	.+200    	; 0x22be <main+0x27c>
	else if (__tmp > 65535)
    21f6:	fe 01       	movw	r30, r28
    21f8:	e3 5b       	subi	r30, 0xB3	; 179
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	60 81       	ld	r22, Z
    21fe:	71 81       	ldd	r23, Z+1	; 0x01
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	3f ef       	ldi	r19, 0xFF	; 255
    2208:	4f e7       	ldi	r20, 0x7F	; 127
    220a:	57 e4       	ldi	r21, 0x47	; 71
    220c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2210:	18 16       	cp	r1, r24
    2212:	0c f0       	brlt	.+2      	; 0x2216 <main+0x1d4>
    2214:	43 c0       	rjmp	.+134    	; 0x229c <main+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	fe 01       	movw	r30, r28
    2218:	ef 5a       	subi	r30, 0xAF	; 175
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	8e 01       	movw	r16, r28
    2236:	05 5b       	subi	r16, 0xB5	; 181
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	f8 01       	movw	r30, r16
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
    224c:	1f c0       	rjmp	.+62     	; 0x228c <main+0x24a>
    224e:	fe 01       	movw	r30, r28
    2250:	e7 5b       	subi	r30, 0xB7	; 183
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	89 e1       	ldi	r24, 0x19	; 25
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	91 83       	std	Z+1, r25	; 0x01
    225a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    225c:	fe 01       	movw	r30, r28
    225e:	e7 5b       	subi	r30, 0xB7	; 183
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <main+0x224>
    226a:	fe 01       	movw	r30, r28
    226c:	e7 5b       	subi	r30, 0xB7	; 183
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	de 01       	movw	r26, r28
    2276:	a5 5b       	subi	r26, 0xB5	; 181
    2278:	bf 4f       	sbci	r27, 0xFF	; 255
    227a:	fe 01       	movw	r30, r28
    227c:	e5 5b       	subi	r30, 0xB5	; 181
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	11 96       	adiw	r26, 0x01	; 1
    2288:	9c 93       	st	X, r25
    228a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	fe 01       	movw	r30, r28
    228e:	e5 5b       	subi	r30, 0xB5	; 181
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	d1 f6       	brne	.-76     	; 0x224e <main+0x20c>
    229a:	27 c0       	rjmp	.+78     	; 0x22ea <main+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	8e 01       	movw	r16, r28
    229e:	05 5b       	subi	r16, 0xB5	; 181
    22a0:	1f 4f       	sbci	r17, 0xFF	; 255
    22a2:	fe 01       	movw	r30, r28
    22a4:	e3 5b       	subi	r30, 0xB3	; 179
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	f8 01       	movw	r30, r16
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
    22be:	de 01       	movw	r26, r28
    22c0:	a9 5b       	subi	r26, 0xB9	; 185
    22c2:	bf 4f       	sbci	r27, 0xFF	; 255
    22c4:	fe 01       	movw	r30, r28
    22c6:	e5 5b       	subi	r30, 0xB5	; 181
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	8d 93       	st	X+, r24
    22d0:	9c 93       	st	X, r25
    22d2:	fe 01       	movw	r30, r28
    22d4:	e9 5b       	subi	r30, 0xB9	; 185
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <main+0x29a>
    22e0:	fe 01       	movw	r30, r28
    22e2:	e9 5b       	subi	r30, 0xB9	; 185
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
            _delay_ms(10);
            DIO_u8SetPortValue(DIO_u8PORTA,0x1F);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	6f e1       	ldi	r22, 0x1F	; 31
    22ee:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
            DIO_u8SetPortValue(DIO_u8PORTC,(u8)second/10);
    22f2:	80 91 7c 00 	lds	r24, 0x007C
    22f6:	9a e0       	ldi	r25, 0x0A	; 10
    22f8:	69 2f       	mov	r22, r25
    22fa:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__udivmodqi4>
    22fe:	98 2f       	mov	r25, r24
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	69 2f       	mov	r22, r25
    2304:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
            DIO_u8SetPortValue(DIO_u8PORTA,0x10);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	60 e1       	ldi	r22, 0x10	; 16
    230c:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
    2310:	fe 01       	movw	r30, r28
    2312:	ed 5b       	subi	r30, 0xBD	; 189
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a0 e2       	ldi	r26, 0x20	; 32
    231c:	b1 e4       	ldi	r27, 0x41	; 65
    231e:	80 83       	st	Z, r24
    2320:	91 83       	std	Z+1, r25	; 0x01
    2322:	a2 83       	std	Z+2, r26	; 0x02
    2324:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	8e 01       	movw	r16, r28
    2328:	01 5c       	subi	r16, 0xC1	; 193
    232a:	1f 4f       	sbci	r17, 0xFF	; 255
    232c:	fe 01       	movw	r30, r28
    232e:	ed 5b       	subi	r30, 0xBD	; 189
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	4a e7       	ldi	r20, 0x7A	; 122
    2340:	53 e4       	ldi	r21, 0x43	; 67
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	f8 01       	movw	r30, r16
    234c:	80 83       	st	Z, r24
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	a2 83       	std	Z+2, r26	; 0x02
    2352:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2354:	fe 01       	movw	r30, r28
    2356:	ff 96       	adiw	r30, 0x3f	; 63
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	2c f4       	brge	.+10     	; 0x237a <main+0x338>
		__ticks = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9e af       	std	Y+62, r25	; 0x3e
    2376:	8d af       	std	Y+61, r24	; 0x3d
    2378:	46 c0       	rjmp	.+140    	; 0x2406 <main+0x3c4>
	else if (__tmp > 65535)
    237a:	fe 01       	movw	r30, r28
    237c:	ff 96       	adiw	r30, 0x3f	; 63
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	3f ef       	ldi	r19, 0xFF	; 255
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	57 e4       	ldi	r21, 0x47	; 71
    238e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	64 f5       	brge	.+88     	; 0x23ee <main+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2396:	fe 01       	movw	r30, r28
    2398:	ed 5b       	subi	r30, 0xBD	; 189
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	60 81       	ld	r22, Z
    239e:	71 81       	ldd	r23, Z+1	; 0x01
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e2       	ldi	r20, 0x20	; 32
    23aa:	51 e4       	ldi	r21, 0x41	; 65
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9e af       	std	Y+62, r25	; 0x3e
    23c2:	8d af       	std	Y+61, r24	; 0x3d
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <main+0x3a2>
    23c6:	89 e1       	ldi	r24, 0x19	; 25
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9c af       	std	Y+60, r25	; 0x3c
    23cc:	8b af       	std	Y+59, r24	; 0x3b
    23ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    23d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <main+0x390>
    23d6:	9c af       	std	Y+60, r25	; 0x3c
    23d8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23da:	8d ad       	ldd	r24, Y+61	; 0x3d
    23dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	9e af       	std	Y+62, r25	; 0x3e
    23e2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	69 f7       	brne	.-38     	; 0x23c6 <main+0x384>
    23ec:	16 c0       	rjmp	.+44     	; 0x241a <main+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ee:	fe 01       	movw	r30, r28
    23f0:	ff 96       	adiw	r30, 0x3f	; 63
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9e af       	std	Y+62, r25	; 0x3e
    2404:	8d af       	std	Y+61, r24	; 0x3d
    2406:	8d ad       	ldd	r24, Y+61	; 0x3d
    2408:	9e ad       	ldd	r25, Y+62	; 0x3e
    240a:	9a af       	std	Y+58, r25	; 0x3a
    240c:	89 af       	std	Y+57, r24	; 0x39
    240e:	89 ad       	ldd	r24, Y+57	; 0x39
    2410:	9a ad       	ldd	r25, Y+58	; 0x3a
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <main+0x3d0>
    2416:	9a af       	std	Y+58, r25	; 0x3a
    2418:	89 af       	std	Y+57, r24	; 0x39
            _delay_ms(10);
            DIO_u8SetPortValue(DIO_u8PORTA,0x2F);
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	6f e2       	ldi	r22, 0x2F	; 47
    241e:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>

            DIO_u8SetPortValue(DIO_u8PORTC,(u8)minutes%10);
    2422:	80 91 7d 00 	lds	r24, 0x007D
    2426:	9a e0       	ldi	r25, 0x0A	; 10
    2428:	69 2f       	mov	r22, r25
    242a:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__udivmodqi4>
    242e:	89 2f       	mov	r24, r25
    2430:	98 2f       	mov	r25, r24
    2432:	82 e0       	ldi	r24, 0x02	; 2
    2434:	69 2f       	mov	r22, r25
    2436:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
            DIO_u8SetPortValue(DIO_u8PORTA,0x08);
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	68 e0       	ldi	r22, 0x08	; 8
    243e:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a0 e2       	ldi	r26, 0x20	; 32
    2448:	b1 e4       	ldi	r27, 0x41	; 65
    244a:	8d ab       	std	Y+53, r24	; 0x35
    244c:	9e ab       	std	Y+54, r25	; 0x36
    244e:	af ab       	std	Y+55, r26	; 0x37
    2450:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	6d a9       	ldd	r22, Y+53	; 0x35
    2454:	7e a9       	ldd	r23, Y+54	; 0x36
    2456:	8f a9       	ldd	r24, Y+55	; 0x37
    2458:	98 ad       	ldd	r25, Y+56	; 0x38
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a e7       	ldi	r20, 0x7A	; 122
    2460:	53 e4       	ldi	r21, 0x43	; 67
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	89 ab       	std	Y+49, r24	; 0x31
    246c:	9a ab       	std	Y+50, r25	; 0x32
    246e:	ab ab       	std	Y+51, r26	; 0x33
    2470:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2472:	69 a9       	ldd	r22, Y+49	; 0x31
    2474:	7a a9       	ldd	r23, Y+50	; 0x32
    2476:	8b a9       	ldd	r24, Y+51	; 0x33
    2478:	9c a9       	ldd	r25, Y+52	; 0x34
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <main+0x452>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	98 ab       	std	Y+48, r25	; 0x30
    2490:	8f a7       	std	Y+47, r24	; 0x2f
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <main+0x4d0>
	else if (__tmp > 65535)
    2494:	69 a9       	ldd	r22, Y+49	; 0x31
    2496:	7a a9       	ldd	r23, Y+50	; 0x32
    2498:	8b a9       	ldd	r24, Y+51	; 0x33
    249a:	9c a9       	ldd	r25, Y+52	; 0x34
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <main+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	6d a9       	ldd	r22, Y+53	; 0x35
    24ae:	7e a9       	ldd	r23, Y+54	; 0x36
    24b0:	8f a9       	ldd	r24, Y+55	; 0x37
    24b2:	98 ad       	ldd	r25, Y+56	; 0x38
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	98 ab       	std	Y+48, r25	; 0x30
    24d2:	8f a7       	std	Y+47, r24	; 0x2f
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <main+0x4b2>
    24d6:	89 e1       	ldi	r24, 0x19	; 25
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9e a7       	std	Y+46, r25	; 0x2e
    24dc:	8d a7       	std	Y+45, r24	; 0x2d
    24de:	8d a5       	ldd	r24, Y+45	; 0x2d
    24e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <main+0x4a0>
    24e6:	9e a7       	std	Y+46, r25	; 0x2e
    24e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ec:	98 a9       	ldd	r25, Y+48	; 0x30
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	98 ab       	std	Y+48, r25	; 0x30
    24f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f6:	98 a9       	ldd	r25, Y+48	; 0x30
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <main+0x494>
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <main+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2500:	7a a9       	ldd	r23, Y+50	; 0x32
    2502:	8b a9       	ldd	r24, Y+51	; 0x33
    2504:	9c a9       	ldd	r25, Y+52	; 0x34
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	98 ab       	std	Y+48, r25	; 0x30
    2510:	8f a7       	std	Y+47, r24	; 0x2f
    2512:	8f a5       	ldd	r24, Y+47	; 0x2f
    2514:	98 a9       	ldd	r25, Y+48	; 0x30
    2516:	9c a7       	std	Y+44, r25	; 0x2c
    2518:	8b a7       	std	Y+43, r24	; 0x2b
    251a:	8b a5       	ldd	r24, Y+43	; 0x2b
    251c:	9c a5       	ldd	r25, Y+44	; 0x2c
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <main+0x4dc>
    2522:	9c a7       	std	Y+44, r25	; 0x2c
    2524:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(10);
            DIO_u8SetPortValue(DIO_u8PORTA,0x37);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	67 e3       	ldi	r22, 0x37	; 55
    252a:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>

            DIO_u8SetPortValue(DIO_u8PORTC,(u8)minutes/10);
    252e:	80 91 7d 00 	lds	r24, 0x007D
    2532:	9a e0       	ldi	r25, 0x0A	; 10
    2534:	69 2f       	mov	r22, r25
    2536:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__udivmodqi4>
    253a:	98 2f       	mov	r25, r24
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	69 2f       	mov	r22, r25
    2540:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
            DIO_u8SetPortValue(DIO_u8PORTA,0x04);
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	64 e0       	ldi	r22, 0x04	; 4
    2548:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e2       	ldi	r26, 0x20	; 32
    2552:	b1 e4       	ldi	r27, 0x41	; 65
    2554:	8f a3       	std	Y+39, r24	; 0x27
    2556:	98 a7       	std	Y+40, r25	; 0x28
    2558:	a9 a7       	std	Y+41, r26	; 0x29
    255a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	6f a1       	ldd	r22, Y+39	; 0x27
    255e:	78 a5       	ldd	r23, Y+40	; 0x28
    2560:	89 a5       	ldd	r24, Y+41	; 0x29
    2562:	9a a5       	ldd	r25, Y+42	; 0x2a
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a e7       	ldi	r20, 0x7A	; 122
    256a:	53 e4       	ldi	r21, 0x43	; 67
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	8b a3       	std	Y+35, r24	; 0x23
    2576:	9c a3       	std	Y+36, r25	; 0x24
    2578:	ad a3       	std	Y+37, r26	; 0x25
    257a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    257c:	6b a1       	ldd	r22, Y+35	; 0x23
    257e:	7c a1       	ldd	r23, Y+36	; 0x24
    2580:	8d a1       	ldd	r24, Y+37	; 0x25
    2582:	9e a1       	ldd	r25, Y+38	; 0x26
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e8       	ldi	r20, 0x80	; 128
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <main+0x55c>
		__ticks = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9a a3       	std	Y+34, r25	; 0x22
    259a:	89 a3       	std	Y+33, r24	; 0x21
    259c:	3f c0       	rjmp	.+126    	; 0x261c <main+0x5da>
	else if (__tmp > 65535)
    259e:	6b a1       	ldd	r22, Y+35	; 0x23
    25a0:	7c a1       	ldd	r23, Y+36	; 0x24
    25a2:	8d a1       	ldd	r24, Y+37	; 0x25
    25a4:	9e a1       	ldd	r25, Y+38	; 0x26
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	4c f5       	brge	.+82     	; 0x2608 <main+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	6f a1       	ldd	r22, Y+39	; 0x27
    25b8:	78 a5       	ldd	r23, Y+40	; 0x28
    25ba:	89 a5       	ldd	r24, Y+41	; 0x29
    25bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9a a3       	std	Y+34, r25	; 0x22
    25dc:	89 a3       	std	Y+33, r24	; 0x21
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <main+0x5bc>
    25e0:	89 e1       	ldi	r24, 0x19	; 25
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	98 a3       	std	Y+32, r25	; 0x20
    25e6:	8f 8f       	std	Y+31, r24	; 0x1f
    25e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ea:	98 a1       	ldd	r25, Y+32	; 0x20
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <main+0x5aa>
    25f0:	98 a3       	std	Y+32, r25	; 0x20
    25f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	89 a1       	ldd	r24, Y+33	; 0x21
    25f6:	9a a1       	ldd	r25, Y+34	; 0x22
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	9a a3       	std	Y+34, r25	; 0x22
    25fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2600:	9a a1       	ldd	r25, Y+34	; 0x22
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	69 f7       	brne	.-38     	; 0x25e0 <main+0x59e>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <main+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	6b a1       	ldd	r22, Y+35	; 0x23
    260a:	7c a1       	ldd	r23, Y+36	; 0x24
    260c:	8d a1       	ldd	r24, Y+37	; 0x25
    260e:	9e a1       	ldd	r25, Y+38	; 0x26
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9a a3       	std	Y+34, r25	; 0x22
    261a:	89 a3       	std	Y+33, r24	; 0x21
    261c:	89 a1       	ldd	r24, Y+33	; 0x21
    261e:	9a a1       	ldd	r25, Y+34	; 0x22
    2620:	9e 8f       	std	Y+30, r25	; 0x1e
    2622:	8d 8f       	std	Y+29, r24	; 0x1d
    2624:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2626:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <main+0x5e6>
    262c:	9e 8f       	std	Y+30, r25	; 0x1e
    262e:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(10);
            DIO_u8SetPortValue(DIO_u8PORTA,0x3B);
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	6b e3       	ldi	r22, 0x3B	; 59
    2634:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
            DIO_u8SetPortValue(DIO_u8PORTC,(u8)hours%10);
    2638:	80 91 7e 00 	lds	r24, 0x007E
    263c:	9a e0       	ldi	r25, 0x0A	; 10
    263e:	69 2f       	mov	r22, r25
    2640:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__udivmodqi4>
    2644:	89 2f       	mov	r24, r25
    2646:	98 2f       	mov	r25, r24
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	69 2f       	mov	r22, r25
    264c:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
            DIO_u8SetPortValue(DIO_u8PORTA,0x02);
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	62 e0       	ldi	r22, 0x02	; 2
    2654:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a0 e2       	ldi	r26, 0x20	; 32
    265e:	b1 e4       	ldi	r27, 0x41	; 65
    2660:	89 8f       	std	Y+25, r24	; 0x19
    2662:	9a 8f       	std	Y+26, r25	; 0x1a
    2664:	ab 8f       	std	Y+27, r26	; 0x1b
    2666:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2668:	69 8d       	ldd	r22, Y+25	; 0x19
    266a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    266e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a e7       	ldi	r20, 0x7A	; 122
    2676:	53 e4       	ldi	r21, 0x43	; 67
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	8d 8b       	std	Y+21, r24	; 0x15
    2682:	9e 8b       	std	Y+22, r25	; 0x16
    2684:	af 8b       	std	Y+23, r26	; 0x17
    2686:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2688:	6d 89       	ldd	r22, Y+21	; 0x15
    268a:	7e 89       	ldd	r23, Y+22	; 0x16
    268c:	8f 89       	ldd	r24, Y+23	; 0x17
    268e:	98 8d       	ldd	r25, Y+24	; 0x18
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    269c:	88 23       	and	r24, r24
    269e:	2c f4       	brge	.+10     	; 0x26aa <main+0x668>
		__ticks = 1;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	9c 8b       	std	Y+20, r25	; 0x14
    26a6:	8b 8b       	std	Y+19, r24	; 0x13
    26a8:	3f c0       	rjmp	.+126    	; 0x2728 <main+0x6e6>
	else if (__tmp > 65535)
    26aa:	6d 89       	ldd	r22, Y+21	; 0x15
    26ac:	7e 89       	ldd	r23, Y+22	; 0x16
    26ae:	8f 89       	ldd	r24, Y+23	; 0x17
    26b0:	98 8d       	ldd	r25, Y+24	; 0x18
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	4c f5       	brge	.+82     	; 0x2714 <main+0x6d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c2:	69 8d       	ldd	r22, Y+25	; 0x19
    26c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e2       	ldi	r20, 0x20	; 32
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9c 8b       	std	Y+20, r25	; 0x14
    26e8:	8b 8b       	std	Y+19, r24	; 0x13
    26ea:	0f c0       	rjmp	.+30     	; 0x270a <main+0x6c8>
    26ec:	89 e1       	ldi	r24, 0x19	; 25
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	9a 8b       	std	Y+18, r25	; 0x12
    26f2:	89 8b       	std	Y+17, r24	; 0x11
    26f4:	89 89       	ldd	r24, Y+17	; 0x11
    26f6:	9a 89       	ldd	r25, Y+18	; 0x12
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <main+0x6b6>
    26fc:	9a 8b       	std	Y+18, r25	; 0x12
    26fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2700:	8b 89       	ldd	r24, Y+19	; 0x13
    2702:	9c 89       	ldd	r25, Y+20	; 0x14
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	9c 8b       	std	Y+20, r25	; 0x14
    2708:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	8b 89       	ldd	r24, Y+19	; 0x13
    270c:	9c 89       	ldd	r25, Y+20	; 0x14
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	69 f7       	brne	.-38     	; 0x26ec <main+0x6aa>
    2712:	14 c0       	rjmp	.+40     	; 0x273c <main+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	6d 89       	ldd	r22, Y+21	; 0x15
    2716:	7e 89       	ldd	r23, Y+22	; 0x16
    2718:	8f 89       	ldd	r24, Y+23	; 0x17
    271a:	98 8d       	ldd	r25, Y+24	; 0x18
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9c 8b       	std	Y+20, r25	; 0x14
    2726:	8b 8b       	std	Y+19, r24	; 0x13
    2728:	8b 89       	ldd	r24, Y+19	; 0x13
    272a:	9c 89       	ldd	r25, Y+20	; 0x14
    272c:	98 8b       	std	Y+16, r25	; 0x10
    272e:	8f 87       	std	Y+15, r24	; 0x0f
    2730:	8f 85       	ldd	r24, Y+15	; 0x0f
    2732:	98 89       	ldd	r25, Y+16	; 0x10
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <main+0x6f2>
    2738:	98 8b       	std	Y+16, r25	; 0x10
    273a:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(10);
            DIO_u8SetPortValue(DIO_u8PORTA,0x3D);
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	6d e3       	ldi	r22, 0x3D	; 61
    2740:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
            DIO_u8SetPortValue(DIO_u8PORTC,(u8)hours/10);
    2744:	80 91 7e 00 	lds	r24, 0x007E
    2748:	9a e0       	ldi	r25, 0x0A	; 10
    274a:	69 2f       	mov	r22, r25
    274c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__udivmodqi4>
    2750:	98 2f       	mov	r25, r24
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	69 2f       	mov	r22, r25
    2756:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
            DIO_u8SetPortValue(DIO_u8PORTA,0x01);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e2       	ldi	r26, 0x20	; 32
    2768:	b1 e4       	ldi	r27, 0x41	; 65
    276a:	8b 87       	std	Y+11, r24	; 0x0b
    276c:	9c 87       	std	Y+12, r25	; 0x0c
    276e:	ad 87       	std	Y+13, r26	; 0x0d
    2770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a e7       	ldi	r20, 0x7A	; 122
    2780:	53 e4       	ldi	r21, 0x43	; 67
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8f 83       	std	Y+7, r24	; 0x07
    278c:	98 87       	std	Y+8, r25	; 0x08
    278e:	a9 87       	std	Y+9, r26	; 0x09
    2790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <main+0x772>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <main+0x7f0>
	else if (__tmp > 65535)
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <main+0x7dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <main+0x7d2>
    27f6:	89 e1       	ldi	r24, 0x19	; 25
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <main+0x7c0>
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	69 f7       	brne	.-38     	; 0x27f6 <main+0x7b4>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <main+0x804>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <main+0x7fc>
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(10);
            DIO_u8SetPortValue(DIO_u8PORTA,0x3E);
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	6e e3       	ldi	r22, 0x3E	; 62
    284a:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
         	 DC_Motor_Move_Left(&motor1_pin);
    284e:	89 e6       	ldi	r24, 0x69	; 105
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DC_Motor_Move_Left>
           /*************************************************************/
            if (reset_status_pin == 1)
    2856:	80 91 84 00 	lds	r24, 0x0084
    285a:	81 30       	cpi	r24, 0x01	; 1
    285c:	31 f4       	brne	.+12     	; 0x286a <main+0x828>
            {
                second = 0;
    285e:	10 92 7c 00 	sts	0x007C, r1
                minutes = 0;
    2862:	10 92 7d 00 	sts	0x007D, r1
                hours = 0;
    2866:	10 92 7e 00 	sts	0x007E, r1
                /*while (reset_status_pin == 1)
                {
                    DIO_u8GetPinValue(DIO_u8PORTC, DIO_u8PIN4, &reset_status_pin);
                }*/
            }
            if(stop_button == 1)
    286a:	80 91 83 00 	lds	r24, 0x0083
    286e:	81 30       	cpi	r24, 0x01	; 1
    2870:	19 f4       	brne	.+6      	; 0x2878 <main+0x836>
            {
            	Set_Prescalar(NO_CLK_SOURCE);
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Set_Prescalar>
            /*	while(stop_button == 1)
            	{
            		DIO_u8GetPinValue(DIO_u8PORTD, DIO_u8PIN4, &stop_button);
            	}*/
            }
            if(resume_button == 1)
    2878:	80 91 82 00 	lds	r24, 0x0082
    287c:	81 30       	cpi	r24, 0x01	; 1
    287e:	09 f0       	breq	.+2      	; 0x2882 <main+0x840>
    2880:	4b cc       	rjmp	.-1898   	; 0x2118 <main+0xd6>
            {
            	Set_Prescalar(CLK_64);
    2882:	83 e0       	ldi	r24, 0x03	; 3
    2884:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Set_Prescalar>
    2888:	47 cc       	rjmp	.-1906   	; 0x2118 <main+0xd6>
            }

        }
        else
        {
        	pwm_timer2(0);
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	0e 94 13 10 	call	0x2026	; 0x2026 <pwm_timer2>
            DIO_u8SetPortValue(DIO_u8PORTA, 0xC0);
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	60 ec       	ldi	r22, 0xC0	; 192
    2894:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPortValue>
    2898:	3f cc       	rjmp	.-1922   	; 0x2118 <main+0xd6>

0000289a <ISR_TIMERcount>:

/*************************************************************/
/* ISR Callback Functions */

void ISR_TIMERcount(void)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    static u16 counter = 0;
    counter++;
    28a2:	80 91 7f 00 	lds	r24, 0x007F
    28a6:	90 91 80 00 	lds	r25, 0x0080
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	90 93 80 00 	sts	0x0080, r25
    28b0:	80 93 7f 00 	sts	0x007F, r24
    if (counter == 489)
    28b4:	80 91 7f 00 	lds	r24, 0x007F
    28b8:	90 91 80 00 	lds	r25, 0x0080
    28bc:	21 e0       	ldi	r18, 0x01	; 1
    28be:	89 3e       	cpi	r24, 0xE9	; 233
    28c0:	92 07       	cpc	r25, r18
    28c2:	49 f4       	brne	.+18     	; 0x28d6 <ISR_TIMERcount+0x3c>
    {
        second++;
    28c4:	80 91 7c 00 	lds	r24, 0x007C
    28c8:	8f 5f       	subi	r24, 0xFF	; 255
    28ca:	80 93 7c 00 	sts	0x007C, r24
        counter = 0;
    28ce:	10 92 80 00 	sts	0x0080, r1
    28d2:	10 92 7f 00 	sts	0x007F, r1
    }
    if (second == 60)
    28d6:	80 91 7c 00 	lds	r24, 0x007C
    28da:	8c 33       	cpi	r24, 0x3C	; 60
    28dc:	39 f4       	brne	.+14     	; 0x28ec <ISR_TIMERcount+0x52>
            {
                minutes++;
    28de:	80 91 7d 00 	lds	r24, 0x007D
    28e2:	8f 5f       	subi	r24, 0xFF	; 255
    28e4:	80 93 7d 00 	sts	0x007D, r24
                second = 0;
    28e8:	10 92 7c 00 	sts	0x007C, r1
            }
            if (minutes == 60)
    28ec:	80 91 7d 00 	lds	r24, 0x007D
    28f0:	8c 33       	cpi	r24, 0x3C	; 60
    28f2:	39 f4       	brne	.+14     	; 0x2902 <ISR_TIMERcount+0x68>
            {
                hours++;
    28f4:	80 91 7e 00 	lds	r24, 0x007E
    28f8:	8f 5f       	subi	r24, 0xFF	; 255
    28fa:	80 93 7e 00 	sts	0x007E, r24
                minutes = 0;
    28fe:	10 92 7d 00 	sts	0x007D, r1
            }
            if (hours == 24)
    2902:	80 91 7e 00 	lds	r24, 0x007E
    2906:	88 31       	cpi	r24, 0x18	; 24
    2908:	39 f4       	brne	.+14     	; 0x2918 <ISR_TIMERcount+0x7e>
            {   hours++;
    290a:	80 91 7e 00 	lds	r24, 0x007E
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	80 93 7e 00 	sts	0x007E, r24
                hours = 0;
    2914:	10 92 7e 00 	sts	0x007E, r1
            }
}
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <speed_down>:

/*************************************************************/

void speed_down(void) {
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    // Decrease the duty cycle by 25, but not below 0
    if (duty_cycle > 25) {
    2926:	80 91 68 00 	lds	r24, 0x0068
    292a:	8a 31       	cpi	r24, 0x1A	; 26
    292c:	30 f0       	brcs	.+12     	; 0x293a <speed_down+0x1c>
        duty_cycle -= 25;
    292e:	80 91 68 00 	lds	r24, 0x0068
    2932:	89 51       	subi	r24, 0x19	; 25
    2934:	80 93 68 00 	sts	0x0068, r24
    2938:	02 c0       	rjmp	.+4      	; 0x293e <speed_down+0x20>
    } else {
        duty_cycle = 0; // Ensure duty_cycle does not go negative
    293a:	10 92 68 00 	sts	0x0068, r1
    }

    // Update PWM with the new duty cycle value
    pwm_timer2(duty_cycle);
    293e:	80 91 68 00 	lds	r24, 0x0068
    2942:	0e 94 13 10 	call	0x2026	; 0x2026 <pwm_timer2>
}
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <speed_up>:

void speed_up(void) {
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    // Increase the duty cycle by 25, but not above 255
    if (duty_cycle + 25 <= 255) {
    2954:	80 91 68 00 	lds	r24, 0x0068
    2958:	88 2f       	mov	r24, r24
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	49 96       	adiw	r24, 0x19	; 25
    295e:	8f 3f       	cpi	r24, 0xFF	; 255
    2960:	91 05       	cpc	r25, r1
    2962:	09 f0       	breq	.+2      	; 0x2966 <speed_up+0x1a>
    2964:	34 f4       	brge	.+12     	; 0x2972 <speed_up+0x26>
        duty_cycle += 25;
    2966:	80 91 68 00 	lds	r24, 0x0068
    296a:	87 5e       	subi	r24, 0xE7	; 231
    296c:	80 93 68 00 	sts	0x0068, r24
    2970:	03 c0       	rjmp	.+6      	; 0x2978 <speed_up+0x2c>
    } else {
        duty_cycle = 255; // Cap duty_cycle at 255
    2972:	8f ef       	ldi	r24, 0xFF	; 255
    2974:	80 93 68 00 	sts	0x0068, r24
    }

    // Update PWM with the new duty cycle value
    pwm_timer2(duty_cycle);
    2978:	80 91 68 00 	lds	r24, 0x0068
    297c:	0e 94 13 10 	call	0x2026	; 0x2026 <pwm_timer2>
}
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <__mulsi3>:
    2986:	62 9f       	mul	r22, r18
    2988:	d0 01       	movw	r26, r0
    298a:	73 9f       	mul	r23, r19
    298c:	f0 01       	movw	r30, r0
    298e:	82 9f       	mul	r24, r18
    2990:	e0 0d       	add	r30, r0
    2992:	f1 1d       	adc	r31, r1
    2994:	64 9f       	mul	r22, r20
    2996:	e0 0d       	add	r30, r0
    2998:	f1 1d       	adc	r31, r1
    299a:	92 9f       	mul	r25, r18
    299c:	f0 0d       	add	r31, r0
    299e:	83 9f       	mul	r24, r19
    29a0:	f0 0d       	add	r31, r0
    29a2:	74 9f       	mul	r23, r20
    29a4:	f0 0d       	add	r31, r0
    29a6:	65 9f       	mul	r22, r21
    29a8:	f0 0d       	add	r31, r0
    29aa:	99 27       	eor	r25, r25
    29ac:	72 9f       	mul	r23, r18
    29ae:	b0 0d       	add	r27, r0
    29b0:	e1 1d       	adc	r30, r1
    29b2:	f9 1f       	adc	r31, r25
    29b4:	63 9f       	mul	r22, r19
    29b6:	b0 0d       	add	r27, r0
    29b8:	e1 1d       	adc	r30, r1
    29ba:	f9 1f       	adc	r31, r25
    29bc:	bd 01       	movw	r22, r26
    29be:	cf 01       	movw	r24, r30
    29c0:	11 24       	eor	r1, r1
    29c2:	08 95       	ret

000029c4 <__udivmodqi4>:
    29c4:	99 1b       	sub	r25, r25
    29c6:	79 e0       	ldi	r23, 0x09	; 9
    29c8:	04 c0       	rjmp	.+8      	; 0x29d2 <__udivmodqi4_ep>

000029ca <__udivmodqi4_loop>:
    29ca:	99 1f       	adc	r25, r25
    29cc:	96 17       	cp	r25, r22
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <__udivmodqi4_ep>
    29d0:	96 1b       	sub	r25, r22

000029d2 <__udivmodqi4_ep>:
    29d2:	88 1f       	adc	r24, r24
    29d4:	7a 95       	dec	r23
    29d6:	c9 f7       	brne	.-14     	; 0x29ca <__udivmodqi4_loop>
    29d8:	80 95       	com	r24
    29da:	08 95       	ret

000029dc <__prologue_saves__>:
    29dc:	2f 92       	push	r2
    29de:	3f 92       	push	r3
    29e0:	4f 92       	push	r4
    29e2:	5f 92       	push	r5
    29e4:	6f 92       	push	r6
    29e6:	7f 92       	push	r7
    29e8:	8f 92       	push	r8
    29ea:	9f 92       	push	r9
    29ec:	af 92       	push	r10
    29ee:	bf 92       	push	r11
    29f0:	cf 92       	push	r12
    29f2:	df 92       	push	r13
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
    2a04:	ca 1b       	sub	r28, r26
    2a06:	db 0b       	sbc	r29, r27
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	09 94       	ijmp

00002a14 <__epilogue_restores__>:
    2a14:	2a 88       	ldd	r2, Y+18	; 0x12
    2a16:	39 88       	ldd	r3, Y+17	; 0x11
    2a18:	48 88       	ldd	r4, Y+16	; 0x10
    2a1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a20:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a22:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a24:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a26:	b9 84       	ldd	r11, Y+9	; 0x09
    2a28:	c8 84       	ldd	r12, Y+8	; 0x08
    2a2a:	df 80       	ldd	r13, Y+7	; 0x07
    2a2c:	ee 80       	ldd	r14, Y+6	; 0x06
    2a2e:	fd 80       	ldd	r15, Y+5	; 0x05
    2a30:	0c 81       	ldd	r16, Y+4	; 0x04
    2a32:	1b 81       	ldd	r17, Y+3	; 0x03
    2a34:	aa 81       	ldd	r26, Y+2	; 0x02
    2a36:	b9 81       	ldd	r27, Y+1	; 0x01
    2a38:	ce 0f       	add	r28, r30
    2a3a:	d1 1d       	adc	r29, r1
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	ed 01       	movw	r28, r26
    2a48:	08 95       	ret

00002a4a <_exit>:
    2a4a:	f8 94       	cli

00002a4c <__stop_program>:
    2a4c:	ff cf       	rjmp	.-2      	; 0x2a4c <__stop_program>
